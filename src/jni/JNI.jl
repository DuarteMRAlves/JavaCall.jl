module JNI

export init_new_vm, destroy_vm, is_jni_loaded, is_env_loaded, AbstractJavaRef

include("Threads.jl")
include("Constants.jl")
include("Types.jl")
include("Interfaces.jl")

import Libdl

using .Threads
using .Constants
using .Types
using .Interfaces

# Global variables

# JavaVM **
const jvmptrref = Ref(Ptr{JavaVM}(C_NULL))
# JNIEnv ** (array of JNIEnv used by different threads)
const jnienvptrs = [Ptr{JNIEnv}(C_NULL)]

const jninativeinterfaceref = Ref(JNINativeInterface())
const jniinvokeinterfaceref = Ref(JNIInvokeInterface())

# API Structs
const Char = UInt8

struct JavaVMOption
    optionString::Ptr{Char}
    extraInfo::Ptr{Nothing}
end

JavaVMOption(optionString::Ptr{Char}) = JavaVMOption(optionString, C_NULL)

struct JavaVMInitArgs
    version::Cint
    nOptions::Cint
    options::Ptr{JavaVMOption}
    ignoreUnrecognized::Cchar
end

JavaVMInitArgs(version::Cint, jopts::Vector{JavaVMOption}, ignoreUnrecognized::Cchar) =
    JavaVMInitArgs(version, convert(Cint, length(jopts)), convert(Ptr{JavaVMOption}, pointer(jopts)), ignoreUnrecognized)

struct JNIError <: Exception
    msg::String
end

# JNI API
"""
    init_new_vm(opts)

Initialize a new Java virtual machine.
"""
function init_new_vm(libpath,opts)
    libjvm = Libdl.dlopen(libpath)
    create = Libdl.dlsym(libjvm, :JNI_CreateJavaVM)
	jopts = [JavaVMOption(pointer(x)) for x in opts]
    Threads.resize_nthreads!(jnienvptrs)
    GC.@preserve jvmptrref jnienvptrs jopts begin
        vm_args = JavaVMInitArgs(JNI_VERSION_1_8, jopts, JNI_TRUE)
        res = @ccall $create(jvmptrref::Ptr{Ptr{JavaVM}}, jnienvptrs::Ptr{Ptr{JNIEnv}}, Ref(vm_args)::Ptr{JavaVMInitArgs})::Cint
        res < 0 && throw(JNIError("Unable to initialise Java VM: $(res)"))
    end
    jvm = unsafe_load(jvmptrref[])
    jniinvokeinterfaceref[] = unsafe_load(jvm)
    jnienv = unsafe_load(jnienvptrs[1])
    jninativeinterfaceref[] = unsafe_load(jnienv)
    _attachthreads()
    return
end

function destroy_vm()
    if !is_env_loaded()
        throw(JNIError("Called destroy without initialising Java VM"))
    end
    _detachthreads()
    destroy_fn = jniinvokeinterfaceref[].DestroyJavaVM
    res = @ccall $destroy_fn(jvmptrref[]::Ptr{JavaVM})::Cint
    res < 0 && throw(JavaCallError("Unable to destroy Java VM"))
    _resetglobalvars()
    nothing
end

is_jni_loaded() = jninativeinterfaceref[].GetVersion != C_NULL
is_env_loaded() = jnienvptrs[1] != C_NULL

# === Below Generated by make_jni2.jl ===

get_version(penv=jnienvptrs[]) =
  ccall(jniinvokeinterfaceref[].GetVersion, jint, (Ptr{JNIEnv},), penv)

define_class(name::AnyString, loader::jobject_arg, buf::Array{jbyte,1}, len::Integer, penv=jnienvptrs[]) =
  ccall(jniinvokeinterfaceref[].DefineClass, jclass, (Ptr{JNIEnv}, Cstring, jobject, Ptr{jbyte}, jsize,), penv, name, loader, buf, len)

find_class(name::AnyString, penv=jnienvptrs[]) =
  ccall(jniinvokeinterfaceref[].FindClass, jclass, (Ptr{JNIEnv}, Cstring,), penv, name)

from_reflected_method(method::jobject_arg, penv=jnienvptrs[]) =
  ccall(jniinvokeinterfaceref[].FromReflectedMethod, jmethodID, (Ptr{JNIEnv}, jobject,), penv, method)

from_reflected_field(field::jobject_arg, penv=jnienvptrs[]) =
  ccall(jniinvokeinterfaceref[].FromReflectedField, jfieldID, (Ptr{JNIEnv}, jobject,), penv, field)

to_reflected_method(cls::jclass, methodID::jmethodID, isStatic::jboolean, penv=jnienvptrs[]) =
  ccall(jniinvokeinterfaceref[].ToReflectedMethod, jobject, (Ptr{JNIEnv}, jclass, jmethodID, jboolean,), penv, cls, methodID, isStatic)

get_superclass(sub::jclass, penv=jnienvptrs[]) =
  ccall(jniinvokeinterfaceref[].GetSuperclass, jclass, (Ptr{JNIEnv}, jclass,), penv, sub)

is_assignable_from(sub::jclass, sup::jclass, penv=jnienvptrs[]) =
  ccall(jniinvokeinterfaceref[].IsAssignableFrom, jboolean, (Ptr{JNIEnv}, jclass, jclass,), penv, sub, sup)

to_reflected_field(cls::jclass, fieldID::jfieldID, isStatic::jboolean, penv=jnienvptrs[]) =
  ccall(jniinvokeinterfaceref[].ToReflectedField, jobject, (Ptr{JNIEnv}, jclass, jfieldID, jboolean,), penv, cls, fieldID, isStatic)

throw(obj::jthrowable, penv=jnienvptrs[]) =
  ccall(jniinvokeinterfaceref[].Throw, jint, (Ptr{JNIEnv}, jthrowable,), penv, obj)

throw_new(clazz::jclass, msg::AnyString, penv=jnienvptrs[]) =
  ccall(jniinvokeinterfaceref[].ThrowNew, jint, (Ptr{JNIEnv}, jclass, Cstring,), penv, clazz, msg)

exception_occurred(penv=jnienvptrs[]) =
  ccall(jniinvokeinterfaceref[].ExceptionOccurred, jthrowable, (Ptr{JNIEnv},), penv)

exception_describe(penv=jnienvptrs[]) =
  ccall(jniinvokeinterfaceref[].ExceptionDescribe, Nothing, (Ptr{JNIEnv},), penv)

exception_clear(penv=jnienvptrs[]) =
  ccall(jniinvokeinterfaceref[].ExceptionClear, Nothing, (Ptr{JNIEnv},), penv)

fatal_error(msg::AnyString, penv=jnienvptrs[]) =
  ccall(jniinvokeinterfaceref[].FatalError, Nothing, (Ptr{JNIEnv}, Cstring,), penv, msg)

push_local_frame(capacity::jint, penv=jnienvptrs[]) =
  ccall(jniinvokeinterfaceref[].PushLocalFrame, jint, (Ptr{JNIEnv}, jint,), penv, capacity)

pop_local_frame(result::jobject_arg, penv=jnienvptrs[]) =
  ccall(jniinvokeinterfaceref[].PopLocalFrame, jobject, (Ptr{JNIEnv}, jobject,), penv, result)

new_global_ref(lobj::jobject_arg, penv=jnienvptrs[]) =
  ccall(jniinvokeinterfaceref[].NewGlobalRef, jobject, (Ptr{JNIEnv}, jobject,), penv, lobj)

delete_global_ref(gref::jobject_arg, penv=jnienvptrs[]) =
  ccall(jniinvokeinterfaceref[].DeleteGlobalRef, Nothing, (Ptr{JNIEnv}, jobject,), penv, gref)

delete_local_ref(obj::jobject_arg, penv=jnienvptrs[]) =
  ccall(jniinvokeinterfaceref[].DeleteLocalRef, Nothing, (Ptr{JNIEnv}, jobject,), penv, obj)

is_same_object(obj1::jobject_arg, obj2::jobject_arg, penv=jnienvptrs[]) =
  ccall(jniinvokeinterfaceref[].IsSameObject, jboolean, (Ptr{JNIEnv}, jobject, jobject,), penv, obj1, obj2)

new_local_ref(ref::jobject_arg, penv=jnienvptrs[]) =
  ccall(jniinvokeinterfaceref[].NewLocalRef, jobject, (Ptr{JNIEnv}, jobject,), penv, ref)

ensure_local_capacity(capacity::jint, penv=jnienvptrs[]) =
  ccall(jniinvokeinterfaceref[].EnsureLocalCapacity, jint, (Ptr{JNIEnv}, jint,), penv, capacity)

alloc_object(clazz::jclass, penv=jnienvptrs[]) =
  ccall(jniinvokeinterfaceref[].AllocObject, jobject, (Ptr{JNIEnv}, jclass,), penv, clazz)

new_object_a(clazz::jclass, methodID::jmethodID, args::Array{jvalue,1}, penv=jnienvptrs[]) =
  ccall(jniinvokeinterfaceref[].NewObjectA, jobject, (Ptr{JNIEnv}, jclass, jmethodID, Ptr{jvalue},), penv, clazz, methodID, args)

get_object_class(obj::jobject_arg, penv=jnienvptrs[]) =
  ccall(jniinvokeinterfaceref[].GetObjectClass, jclass, (Ptr{JNIEnv}, jobject,), penv, obj)

is_instance_of(obj::jobject_arg, clazz::jclass, penv=jnienvptrs[]) =
  ccall(jniinvokeinterfaceref[].IsInstanceOf, jboolean, (Ptr{JNIEnv}, jobject, jclass,), penv, obj, clazz)

get_method_i_d(clazz::jclass, name::AnyString, sig::AnyString, penv=jnienvptrs[]) =
  ccall(jniinvokeinterfaceref[].GetMethodID, jmethodID, (Ptr{JNIEnv}, jclass, Cstring, Cstring,), penv, clazz, name, sig)

call_object_method_a(obj::jobject_arg, methodID::jmethodID, args::Array{jvalue,1}, penv=jnienvptrs[]) =
  ccall(jniinvokeinterfaceref[].CallObjectMethodA, jobject, (Ptr{JNIEnv}, jobject, jmethodID, Ptr{jvalue},), penv, obj, methodID, args)

call_boolean_method_a(obj::jobject_arg, methodID::jmethodID, args::Array{jvalue,1}, penv=jnienvptrs[]) =
  ccall(jniinvokeinterfaceref[].CallBooleanMethodA, jboolean, (Ptr{JNIEnv}, jobject, jmethodID, Ptr{jvalue},), penv, obj, methodID, args)

call_byte_method_a(obj::jobject_arg, methodID::jmethodID, args::Array{jvalue,1}, penv=jnienvptrs[]) =
  ccall(jniinvokeinterfaceref[].CallByteMethodA, jbyte, (Ptr{JNIEnv}, jobject, jmethodID, Ptr{jvalue},), penv, obj, methodID, args)

call_char_method_a(obj::jobject_arg, methodID::jmethodID, args::Array{jvalue,1}, penv=jnienvptrs[]) =
  ccall(jniinvokeinterfaceref[].CallCharMethodA, jchar, (Ptr{JNIEnv}, jobject, jmethodID, Ptr{jvalue},), penv, obj, methodID, args)

call_short_method_a(obj::jobject_arg, methodID::jmethodID, args::Array{jvalue,1}, penv=jnienvptrs[]) =
  ccall(jniinvokeinterfaceref[].CallShortMethodA, jshort, (Ptr{JNIEnv}, jobject, jmethodID, Ptr{jvalue},), penv, obj, methodID, args)

call_int_method_a(obj::jobject_arg, methodID::jmethodID, args::Array{jvalue,1}, penv=jnienvptrs[]) =
  ccall(jniinvokeinterfaceref[].CallIntMethodA, jint, (Ptr{JNIEnv}, jobject, jmethodID, Ptr{jvalue},), penv, obj, methodID, args)

call_long_method_a(obj::jobject_arg, methodID::jmethodID, args::Array{jvalue,1}, penv=jnienvptrs[]) =
  ccall(jniinvokeinterfaceref[].CallLongMethodA, jlong, (Ptr{JNIEnv}, jobject, jmethodID, Ptr{jvalue},), penv, obj, methodID, args)

call_float_method_a(obj::jobject_arg, methodID::jmethodID, args::Array{jvalue,1}, penv=jnienvptrs[]) =
  ccall(jniinvokeinterfaceref[].CallFloatMethodA, jfloat, (Ptr{JNIEnv}, jobject, jmethodID, Ptr{jvalue},), penv, obj, methodID, args)

call_double_method_a(obj::jobject_arg, methodID::jmethodID, args::Array{jvalue,1}, penv=jnienvptrs[]) =
  ccall(jniinvokeinterfaceref[].CallDoubleMethodA, jdouble, (Ptr{JNIEnv}, jobject, jmethodID, Ptr{jvalue},), penv, obj, methodID, args)

call_void_method_a(obj::jobject_arg, methodID::jmethodID, args::Array{jvalue,1}, penv=jnienvptrs[]) =
  ccall(jniinvokeinterfaceref[].CallVoidMethodA, Nothing, (Ptr{JNIEnv}, jobject, jmethodID, Ptr{jvalue},), penv, obj, methodID, args)

call_nonvirtual_object_method_a(obj::jobject_arg, clazz::jclass, methodID::jmethodID, args::Array{jvalue,1}, penv=jnienvptrs[]) =
  ccall(jniinvokeinterfaceref[].CallNonvirtualObjectMethodA, jobject, (Ptr{JNIEnv}, jobject, jclass, jmethodID, Ptr{jvalue},), penv, obj, clazz, methodID, args)

call_nonvirtual_boolean_method_a(obj::jobject_arg, clazz::jclass, methodID::jmethodID, args::Array{jvalue,1}, penv=jnienvptrs[]) =
  ccall(jniinvokeinterfaceref[].CallNonvirtualBooleanMethodA, jboolean, (Ptr{JNIEnv}, jobject, jclass, jmethodID, Ptr{jvalue},), penv, obj, clazz, methodID, args)

call_nonvirtual_byte_method_a(obj::jobject_arg, clazz::jclass, methodID::jmethodID, args::Array{jvalue,1}, penv=jnienvptrs[]) =
  ccall(jniinvokeinterfaceref[].CallNonvirtualByteMethodA, jbyte, (Ptr{JNIEnv}, jobject, jclass, jmethodID, Ptr{jvalue},), penv, obj, clazz, methodID, args)

call_nonvirtual_char_method_a(obj::jobject_arg, clazz::jclass, methodID::jmethodID, args::Array{jvalue,1}, penv=jnienvptrs[]) =
  ccall(jniinvokeinterfaceref[].CallNonvirtualCharMethodA, jchar, (Ptr{JNIEnv}, jobject, jclass, jmethodID, Ptr{jvalue},), penv, obj, clazz, methodID, args)

call_nonvirtual_short_method_a(obj::jobject_arg, clazz::jclass, methodID::jmethodID, args::Array{jvalue,1}, penv=jnienvptrs[]) =
  ccall(jniinvokeinterfaceref[].CallNonvirtualShortMethodA, jshort, (Ptr{JNIEnv}, jobject, jclass, jmethodID, Ptr{jvalue},), penv, obj, clazz, methodID, args)

call_nonvirtual_int_method_a(obj::jobject_arg, clazz::jclass, methodID::jmethodID, args::Array{jvalue,1}, penv=jnienvptrs[]) =
  ccall(jniinvokeinterfaceref[].CallNonvirtualIntMethodA, jint, (Ptr{JNIEnv}, jobject, jclass, jmethodID, Ptr{jvalue},), penv, obj, clazz, methodID, args)

call_nonvirtual_long_method_a(obj::jobject_arg, clazz::jclass, methodID::jmethodID, args::Array{jvalue,1}, penv=jnienvptrs[]) =
  ccall(jniinvokeinterfaceref[].CallNonvirtualLongMethodA, jlong, (Ptr{JNIEnv}, jobject, jclass, jmethodID, Ptr{jvalue},), penv, obj, clazz, methodID, args)

call_nonvirtual_float_method_a(obj::jobject_arg, clazz::jclass, methodID::jmethodID, args::Array{jvalue,1}, penv=jnienvptrs[]) =
  ccall(jniinvokeinterfaceref[].CallNonvirtualFloatMethodA, jfloat, (Ptr{JNIEnv}, jobject, jclass, jmethodID, Ptr{jvalue},), penv, obj, clazz, methodID, args)

call_nonvirtual_double_method_a(obj::jobject_arg, clazz::jclass, methodID::jmethodID, args::Array{jvalue,1}, penv=jnienvptrs[]) =
  ccall(jniinvokeinterfaceref[].CallNonvirtualDoubleMethodA, jdouble, (Ptr{JNIEnv}, jobject, jclass, jmethodID, Ptr{jvalue},), penv, obj, clazz, methodID, args)

call_nonvirtual_void_method_a(obj::jobject_arg, clazz::jclass, methodID::jmethodID, args::Array{jvalue,1}, penv=jnienvptrs[]) =
  ccall(jniinvokeinterfaceref[].CallNonvirtualVoidMethodA, Nothing, (Ptr{JNIEnv}, jobject, jclass, jmethodID, Ptr{jvalue},), penv, obj, clazz, methodID, args)

get_field_i_d(clazz::jclass, name::AnyString, sig::AnyString, penv=jnienvptrs[]) =
  ccall(jniinvokeinterfaceref[].GetFieldID, jfieldID, (Ptr{JNIEnv}, jclass, Cstring, Cstring,), penv, clazz, name, sig)

get_object_field(obj::jobject_arg, fieldID::jfieldID, penv=jnienvptrs[]) =
  ccall(jniinvokeinterfaceref[].GetObjectField, jobject, (Ptr{JNIEnv}, jobject, jfieldID,), penv, obj, fieldID)

get_boolean_field(obj::jobject_arg, fieldID::jfieldID, penv=jnienvptrs[]) =
  ccall(jniinvokeinterfaceref[].GetBooleanField, jboolean, (Ptr{JNIEnv}, jobject, jfieldID,), penv, obj, fieldID)

get_byte_field(obj::jobject_arg, fieldID::jfieldID, penv=jnienvptrs[]) =
  ccall(jniinvokeinterfaceref[].GetByteField, jbyte, (Ptr{JNIEnv}, jobject, jfieldID,), penv, obj, fieldID)

get_char_field(obj::jobject_arg, fieldID::jfieldID, penv=jnienvptrs[]) =
  ccall(jniinvokeinterfaceref[].GetCharField, jchar, (Ptr{JNIEnv}, jobject, jfieldID,), penv, obj, fieldID)

get_short_field(obj::jobject_arg, fieldID::jfieldID, penv=jnienvptrs[]) =
  ccall(jniinvokeinterfaceref[].GetShortField, jshort, (Ptr{JNIEnv}, jobject, jfieldID,), penv, obj, fieldID)

get_int_field(obj::jobject_arg, fieldID::jfieldID, penv=jnienvptrs[]) =
  ccall(jniinvokeinterfaceref[].GetIntField, jint, (Ptr{JNIEnv}, jobject, jfieldID,), penv, obj, fieldID)

get_long_field(obj::jobject_arg, fieldID::jfieldID, penv=jnienvptrs[]) =
  ccall(jniinvokeinterfaceref[].GetLongField, jlong, (Ptr{JNIEnv}, jobject, jfieldID,), penv, obj, fieldID)

get_float_field(obj::jobject_arg, fieldID::jfieldID, penv=jnienvptrs[]) =
  ccall(jniinvokeinterfaceref[].GetFloatField, jfloat, (Ptr{JNIEnv}, jobject, jfieldID,), penv, obj, fieldID)

get_double_field(obj::jobject_arg, fieldID::jfieldID, penv=jnienvptrs[]) =
  ccall(jniinvokeinterfaceref[].GetDoubleField, jdouble, (Ptr{JNIEnv}, jobject, jfieldID,), penv, obj, fieldID)

set_object_field(obj::jobject_arg, fieldID::jfieldID, val::jobject_arg, penv=jnienvptrs[]) =
  ccall(jniinvokeinterfaceref[].SetObjectField, Nothing, (Ptr{JNIEnv}, jobject, jfieldID, jobject,), penv, obj, fieldID, val)

set_boolean_field(obj::jobject_arg, fieldID::jfieldID, val::jboolean, penv=jnienvptrs[]) =
  ccall(jniinvokeinterfaceref[].SetBooleanField, Nothing, (Ptr{JNIEnv}, jobject, jfieldID, jboolean,), penv, obj, fieldID, val)

set_byte_field(obj::jobject_arg, fieldID::jfieldID, val::jbyte, penv=jnienvptrs[]) =
  ccall(jniinvokeinterfaceref[].SetByteField, Nothing, (Ptr{JNIEnv}, jobject, jfieldID, jbyte,), penv, obj, fieldID, val)

set_char_field(obj::jobject_arg, fieldID::jfieldID, val::jchar, penv=jnienvptrs[]) =
  ccall(jniinvokeinterfaceref[].SetCharField, Nothing, (Ptr{JNIEnv}, jobject, jfieldID, jchar,), penv, obj, fieldID, val)

set_short_field(obj::jobject_arg, fieldID::jfieldID, val::jshort, penv=jnienvptrs[]) =
  ccall(jniinvokeinterfaceref[].SetShortField, Nothing, (Ptr{JNIEnv}, jobject, jfieldID, jshort,), penv, obj, fieldID, val)

set_int_field(obj::jobject_arg, fieldID::jfieldID, val::jint, penv=jnienvptrs[]) =
  ccall(jniinvokeinterfaceref[].SetIntField, Nothing, (Ptr{JNIEnv}, jobject, jfieldID, jint,), penv, obj, fieldID, val)

set_long_field(obj::jobject_arg, fieldID::jfieldID, val::jlong, penv=jnienvptrs[]) =
  ccall(jniinvokeinterfaceref[].SetLongField, Nothing, (Ptr{JNIEnv}, jobject, jfieldID, jlong,), penv, obj, fieldID, val)

set_float_field(obj::jobject_arg, fieldID::jfieldID, val::jfloat, penv=jnienvptrs[]) =
  ccall(jniinvokeinterfaceref[].SetFloatField, Nothing, (Ptr{JNIEnv}, jobject, jfieldID, jfloat,), penv, obj, fieldID, val)

set_double_field(obj::jobject_arg, fieldID::jfieldID, val::jdouble, penv=jnienvptrs[]) =
  ccall(jniinvokeinterfaceref[].SetDoubleField, Nothing, (Ptr{JNIEnv}, jobject, jfieldID, jdouble,), penv, obj, fieldID, val)

get_static_method_i_d(clazz::jclass, name::AnyString, sig::AnyString, penv=jnienvptrs[]) =
  ccall(jniinvokeinterfaceref[].GetStaticMethodID, jmethodID, (Ptr{JNIEnv}, jclass, Cstring, Cstring,), penv, clazz, name, sig)

call_static_object_method_a(clazz::jclass, methodID::jmethodID, args::Array{jvalue,1}, penv=jnienvptrs[]) =
  ccall(jniinvokeinterfaceref[].CallStaticObjectMethodA, jobject, (Ptr{JNIEnv}, jclass, jmethodID, Ptr{jvalue},), penv, clazz, methodID, args)

call_static_boolean_method_a(clazz::jclass, methodID::jmethodID, args::Array{jvalue,1}, penv=jnienvptrs[]) =
  ccall(jniinvokeinterfaceref[].CallStaticBooleanMethodA, jboolean, (Ptr{JNIEnv}, jclass, jmethodID, Ptr{jvalue},), penv, clazz, methodID, args)

call_static_byte_method_a(clazz::jclass, methodID::jmethodID, args::Array{jvalue,1}, penv=jnienvptrs[]) =
  ccall(jniinvokeinterfaceref[].CallStaticByteMethodA, jbyte, (Ptr{JNIEnv}, jclass, jmethodID, Ptr{jvalue},), penv, clazz, methodID, args)

call_static_char_method_a(clazz::jclass, methodID::jmethodID, args::Array{jvalue,1}, penv=jnienvptrs[]) =
  ccall(jniinvokeinterfaceref[].CallStaticCharMethodA, jchar, (Ptr{JNIEnv}, jclass, jmethodID, Ptr{jvalue},), penv, clazz, methodID, args)

call_static_short_method_a(clazz::jclass, methodID::jmethodID, args::Array{jvalue,1}, penv=jnienvptrs[]) =
  ccall(jniinvokeinterfaceref[].CallStaticShortMethodA, jshort, (Ptr{JNIEnv}, jclass, jmethodID, Ptr{jvalue},), penv, clazz, methodID, args)

call_static_int_method_a(clazz::jclass, methodID::jmethodID, args::Array{jvalue,1}, penv=jnienvptrs[]) =
  ccall(jniinvokeinterfaceref[].CallStaticIntMethodA, jint, (Ptr{JNIEnv}, jclass, jmethodID, Ptr{jvalue},), penv, clazz, methodID, args)

call_static_long_method_a(clazz::jclass, methodID::jmethodID, args::Array{jvalue,1}, penv=jnienvptrs[]) =
  ccall(jniinvokeinterfaceref[].CallStaticLongMethodA, jlong, (Ptr{JNIEnv}, jclass, jmethodID, Ptr{jvalue},), penv, clazz, methodID, args)

call_static_float_method_a(clazz::jclass, methodID::jmethodID, args::Array{jvalue,1}, penv=jnienvptrs[]) =
  ccall(jniinvokeinterfaceref[].CallStaticFloatMethodA, jfloat, (Ptr{JNIEnv}, jclass, jmethodID, Ptr{jvalue},), penv, clazz, methodID, args)

call_static_double_method_a(clazz::jclass, methodID::jmethodID, args::Array{jvalue,1}, penv=jnienvptrs[]) =
  ccall(jniinvokeinterfaceref[].CallStaticDoubleMethodA, jdouble, (Ptr{JNIEnv}, jclass, jmethodID, Ptr{jvalue},), penv, clazz, methodID, args)

call_static_void_method_a(cls::jclass, methodID::jmethodID, args::Array{jvalue,1}, penv=jnienvptrs[]) =
  ccall(jniinvokeinterfaceref[].CallStaticVoidMethodA, Nothing, (Ptr{JNIEnv}, jclass, jmethodID, Ptr{jvalue},), penv, cls, methodID, args)

get_static_field_i_d(clazz::jclass, name::AnyString, sig::AnyString, penv=jnienvptrs[]) =
  ccall(jniinvokeinterfaceref[].GetStaticFieldID, jfieldID, (Ptr{JNIEnv}, jclass, Cstring, Cstring,), penv, clazz, name, sig)

get_static_object_field(clazz::jclass, fieldID::jfieldID, penv=jnienvptrs[]) =
  ccall(jniinvokeinterfaceref[].GetStaticObjectField, jobject, (Ptr{JNIEnv}, jclass, jfieldID,), penv, clazz, fieldID)

get_static_boolean_field(clazz::jclass, fieldID::jfieldID, penv=jnienvptrs[]) =
  ccall(jniinvokeinterfaceref[].GetStaticBooleanField, jboolean, (Ptr{JNIEnv}, jclass, jfieldID,), penv, clazz, fieldID)

get_static_byte_field(clazz::jclass, fieldID::jfieldID, penv=jnienvptrs[]) =
  ccall(jniinvokeinterfaceref[].GetStaticByteField, jbyte, (Ptr{JNIEnv}, jclass, jfieldID,), penv, clazz, fieldID)

get_static_char_field(clazz::jclass, fieldID::jfieldID, penv=jnienvptrs[]) =
  ccall(jniinvokeinterfaceref[].GetStaticCharField, jchar, (Ptr{JNIEnv}, jclass, jfieldID,), penv, clazz, fieldID)

get_static_short_field(clazz::jclass, fieldID::jfieldID, penv=jnienvptrs[]) =
  ccall(jniinvokeinterfaceref[].GetStaticShortField, jshort, (Ptr{JNIEnv}, jclass, jfieldID,), penv, clazz, fieldID)

get_static_int_field(clazz::jclass, fieldID::jfieldID, penv=jnienvptrs[]) =
  ccall(jniinvokeinterfaceref[].GetStaticIntField, jint, (Ptr{JNIEnv}, jclass, jfieldID,), penv, clazz, fieldID)

get_static_long_field(clazz::jclass, fieldID::jfieldID, penv=jnienvptrs[]) =
  ccall(jniinvokeinterfaceref[].GetStaticLongField, jlong, (Ptr{JNIEnv}, jclass, jfieldID,), penv, clazz, fieldID)

get_static_float_field(clazz::jclass, fieldID::jfieldID, penv=jnienvptrs[]) =
  ccall(jniinvokeinterfaceref[].GetStaticFloatField, jfloat, (Ptr{JNIEnv}, jclass, jfieldID,), penv, clazz, fieldID)

get_static_double_field(clazz::jclass, fieldID::jfieldID, penv=jnienvptrs[]) =
  ccall(jniinvokeinterfaceref[].GetStaticDoubleField, jdouble, (Ptr{JNIEnv}, jclass, jfieldID,), penv, clazz, fieldID)

set_static_object_field(clazz::jclass, fieldID::jfieldID, value::jobject_arg, penv=jnienvptrs[]) =
  ccall(jniinvokeinterfaceref[].SetStaticObjectField, Nothing, (Ptr{JNIEnv}, jclass, jfieldID, jobject,), penv, clazz, fieldID, value)

set_static_boolean_field(clazz::jclass, fieldID::jfieldID, value::jboolean, penv=jnienvptrs[]) =
  ccall(jniinvokeinterfaceref[].SetStaticBooleanField, Nothing, (Ptr{JNIEnv}, jclass, jfieldID, jboolean,), penv, clazz, fieldID, value)

set_static_byte_field(clazz::jclass, fieldID::jfieldID, value::jbyte, penv=jnienvptrs[]) =
  ccall(jniinvokeinterfaceref[].SetStaticByteField, Nothing, (Ptr{JNIEnv}, jclass, jfieldID, jbyte,), penv, clazz, fieldID, value)

set_static_char_field(clazz::jclass, fieldID::jfieldID, value::jchar, penv=jnienvptrs[]) =
  ccall(jniinvokeinterfaceref[].SetStaticCharField, Nothing, (Ptr{JNIEnv}, jclass, jfieldID, jchar,), penv, clazz, fieldID, value)

set_static_short_field(clazz::jclass, fieldID::jfieldID, value::jshort, penv=jnienvptrs[]) =
  ccall(jniinvokeinterfaceref[].SetStaticShortField, Nothing, (Ptr{JNIEnv}, jclass, jfieldID, jshort,), penv, clazz, fieldID, value)

set_static_int_field(clazz::jclass, fieldID::jfieldID, value::jint, penv=jnienvptrs[]) =
  ccall(jniinvokeinterfaceref[].SetStaticIntField, Nothing, (Ptr{JNIEnv}, jclass, jfieldID, jint,), penv, clazz, fieldID, value)

set_static_long_field(clazz::jclass, fieldID::jfieldID, value::jlong, penv=jnienvptrs[]) =
  ccall(jniinvokeinterfaceref[].SetStaticLongField, Nothing, (Ptr{JNIEnv}, jclass, jfieldID, jlong,), penv, clazz, fieldID, value)

set_static_float_field(clazz::jclass, fieldID::jfieldID, value::jfloat, penv=jnienvptrs[]) =
  ccall(jniinvokeinterfaceref[].SetStaticFloatField, Nothing, (Ptr{JNIEnv}, jclass, jfieldID, jfloat,), penv, clazz, fieldID, value)

set_static_double_field(clazz::jclass, fieldID::jfieldID, value::jdouble, penv=jnienvptrs[]) =
  ccall(jniinvokeinterfaceref[].SetStaticDoubleField, Nothing, (Ptr{JNIEnv}, jclass, jfieldID, jdouble,), penv, clazz, fieldID, value)

new_string(unicode::Array{jchar,1}, len::Integer, penv=jnienvptrs[]) =
  ccall(jniinvokeinterfaceref[].NewString, jstring, (Ptr{JNIEnv}, Ptr{jchar}, jsize,), penv, unicode, len)

get_string_length(str::jstring, penv=jnienvptrs[]) =
  ccall(jniinvokeinterfaceref[].GetStringLength, jsize, (Ptr{JNIEnv}, jstring,), penv, str)

get_string_chars(str::jstring, isCopy::PtrIsCopy, penv=jnienvptrs[]) =
  ccall(jniinvokeinterfaceref[].GetStringChars, Ptr{jchar}, (Ptr{JNIEnv}, jstring, Ptr{jboolean},), penv, str, isCopy)

release_string_chars(str::jstring, chars::Array{jchar,1}, penv=jnienvptrs[]) =
  ccall(jniinvokeinterfaceref[].ReleaseStringChars, Nothing, (Ptr{JNIEnv}, jstring, Ptr{jchar},), penv, str, chars)

new_string_u_t_f(utf::AnyString, penv=jnienvptrs[]) =
  ccall(jniinvokeinterfaceref[].NewStringUTF, jstring, (Ptr{JNIEnv}, Cstring,), penv, utf)

get_string_u_t_f_length(str::jstring, penv=jnienvptrs[]) =
  ccall(jniinvokeinterfaceref[].GetStringUTFLength, jsize, (Ptr{JNIEnv}, jstring,), penv, str)

get_string_u_t_f_chars(str::jstring, isCopy::PtrIsCopy, penv=jnienvptrs[]) =
  ccall(jniinvokeinterfaceref[].GetStringUTFChars, Cstring, (Ptr{JNIEnv}, jstring, Ptr{jboolean},), penv, str, isCopy)

release_string_u_t_f_chars(str::jstring, chars::AnyString, penv=jnienvptrs[]) =
  ccall(jniinvokeinterfaceref[].ReleaseStringUTFChars, Nothing, (Ptr{JNIEnv}, jstring, Cstring,), penv, str, chars)

get_array_length(array::jarray, penv=jnienvptrs[]) =
  ccall(jniinvokeinterfaceref[].GetArrayLength, jsize, (Ptr{JNIEnv}, jarray,), penv, array)

new_object_array(len::Integer, clazz::jclass, init::jobject_arg, penv=jnienvptrs[]) =
  ccall(jniinvokeinterfaceref[].NewObjectArray, jobjectArray, (Ptr{JNIEnv}, jsize, jclass, jobject,), penv, len, clazz, init)

get_object_array_element(array::jobjectArray_arg, index::Integer, penv=jnienvptrs[]) =
  ccall(jniinvokeinterfaceref[].GetObjectArrayElement, jobject, (Ptr{JNIEnv}, jobjectArray, jsize,), penv, array, index)

set_object_array_element(array::jobjectArray_arg, index::Integer, val::jobject_arg, penv=jnienvptrs[]) =
  ccall(jniinvokeinterfaceref[].SetObjectArrayElement, Nothing, (Ptr{JNIEnv}, jobjectArray, jsize, jobject,), penv, array, index, val)

new_boolean_array(len::Integer, penv=jnienvptrs[]) =
  ccall(jniinvokeinterfaceref[].NewBooleanArray, jbooleanArray, (Ptr{JNIEnv}, jsize,), penv, len)

new_byte_array(len::Integer, penv=jnienvptrs[]) =
  ccall(jniinvokeinterfaceref[].NewByteArray, jbyteArray, (Ptr{JNIEnv}, jsize,), penv, len)

new_char_array(len::Integer, penv=jnienvptrs[]) =
  ccall(jniinvokeinterfaceref[].NewCharArray, jcharArray, (Ptr{JNIEnv}, jsize,), penv, len)

new_short_array(len::Integer, penv=jnienvptrs[]) =
  ccall(jniinvokeinterfaceref[].NewShortArray, jshortArray, (Ptr{JNIEnv}, jsize,), penv, len)

new_int_array(len::Integer, penv=jnienvptrs[]) =
  ccall(jniinvokeinterfaceref[].NewIntArray, jintArray, (Ptr{JNIEnv}, jsize,), penv, len)

new_long_array(len::Integer, penv=jnienvptrs[]) =
  ccall(jniinvokeinterfaceref[].NewLongArray, jlongArray, (Ptr{JNIEnv}, jsize,), penv, len)

new_float_array(len::Integer, penv=jnienvptrs[]) =
  ccall(jniinvokeinterfaceref[].NewFloatArray, jfloatArray, (Ptr{JNIEnv}, jsize,), penv, len)

new_double_array(len::Integer, penv=jnienvptrs[]) =
  ccall(jniinvokeinterfaceref[].NewDoubleArray, jdoubleArray, (Ptr{JNIEnv}, jsize,), penv, len)

get_boolean_array_elements(array::jbooleanArray, isCopy::PtrIsCopy, penv=jnienvptrs[]) =
  ccall(jniinvokeinterfaceref[].GetBooleanArrayElements, Ptr{jboolean}, (Ptr{JNIEnv}, jbooleanArray, Ptr{jboolean},), penv, array, isCopy)

get_byte_array_elements(array::jbyteArray, isCopy::PtrIsCopy, penv=jnienvptrs[]) =
  ccall(jniinvokeinterfaceref[].GetByteArrayElements, Ptr{jbyte}, (Ptr{JNIEnv}, jbyteArray, Ptr{jboolean},), penv, array, isCopy)

get_char_array_elements(array::jcharArray, isCopy::PtrIsCopy, penv=jnienvptrs[]) =
  ccall(jniinvokeinterfaceref[].GetCharArrayElements, Ptr{jchar}, (Ptr{JNIEnv}, jcharArray, Ptr{jboolean},), penv, array, isCopy)

get_short_array_elements(array::jshortArray, isCopy::PtrIsCopy, penv=jnienvptrs[]) =
  ccall(jniinvokeinterfaceref[].GetShortArrayElements, Ptr{jshort}, (Ptr{JNIEnv}, jshortArray, Ptr{jboolean},), penv, array, isCopy)

get_int_array_elements(array::jintArray, isCopy::PtrIsCopy, penv=jnienvptrs[]) =
  ccall(jniinvokeinterfaceref[].GetIntArrayElements, Ptr{jint}, (Ptr{JNIEnv}, jintArray, Ptr{jboolean},), penv, array, isCopy)

get_long_array_elements(array::jlongArray, isCopy::PtrIsCopy, penv=jnienvptrs[]) =
  ccall(jniinvokeinterfaceref[].GetLongArrayElements, Ptr{jlong}, (Ptr{JNIEnv}, jlongArray, Ptr{jboolean},), penv, array, isCopy)

get_float_array_elements(array::jfloatArray, isCopy::PtrIsCopy, penv=jnienvptrs[]) =
  ccall(jniinvokeinterfaceref[].GetFloatArrayElements, Ptr{jfloat}, (Ptr{JNIEnv}, jfloatArray, Ptr{jboolean},), penv, array, isCopy)

get_double_array_elements(array::jdoubleArray, isCopy::PtrIsCopy, penv=jnienvptrs[]) =
  ccall(jniinvokeinterfaceref[].GetDoubleArrayElements, Ptr{jdouble}, (Ptr{JNIEnv}, jdoubleArray, Ptr{jboolean},), penv, array, isCopy)

release_boolean_array_elements(array::jbooleanArray, elems::Ptr{jboolean}, mode::jint, penv=jnienvptrs[]) =
  ccall(jniinvokeinterfaceref[].ReleaseBooleanArrayElements, Nothing, (Ptr{JNIEnv}, jbooleanArray, Ptr{jboolean}, jint,), penv, array, elems, mode)

release_byte_array_elements(array::jbyteArray, elems::Ptr{jbyte}, mode::jint, penv=jnienvptrs[]) =
  ccall(jniinvokeinterfaceref[].ReleaseByteArrayElements, Nothing, (Ptr{JNIEnv}, jbyteArray, Ptr{jbyte}, jint,), penv, array, elems, mode)

release_char_array_elements(array::jcharArray, elems::Ptr{jchar}, mode::jint, penv=jnienvptrs[]) =
  ccall(jniinvokeinterfaceref[].ReleaseCharArrayElements, Nothing, (Ptr{JNIEnv}, jcharArray, Ptr{jchar}, jint,), penv, array, elems, mode)

release_short_array_elements(array::jshortArray, elems::Ptr{jshort}, mode::jint, penv=jnienvptrs[]) =
  ccall(jniinvokeinterfaceref[].ReleaseShortArrayElements, Nothing, (Ptr{JNIEnv}, jshortArray, Ptr{jshort}, jint,), penv, array, elems, mode)

release_int_array_elements(array::jintArray, elems::Ptr{jint}, mode::jint, penv=jnienvptrs[]) =
  ccall(jniinvokeinterfaceref[].ReleaseIntArrayElements, Nothing, (Ptr{JNIEnv}, jintArray, Ptr{jint}, jint,), penv, array, elems, mode)

release_long_array_elements(array::jlongArray, elems::Ptr{jlong}, mode::jint, penv=jnienvptrs[]) =
  ccall(jniinvokeinterfaceref[].ReleaseLongArrayElements, Nothing, (Ptr{JNIEnv}, jlongArray, Ptr{jlong}, jint,), penv, array, elems, mode)

release_float_array_elements(array::jfloatArray, elems::Ptr{jfloat}, mode::jint, penv=jnienvptrs[]) =
  ccall(jniinvokeinterfaceref[].ReleaseFloatArrayElements, Nothing, (Ptr{JNIEnv}, jfloatArray, Ptr{jfloat}, jint,), penv, array, elems, mode)

release_double_array_elements(array::jdoubleArray, elems::Ptr{jdouble}, mode::jint, penv=jnienvptrs[]) =
  ccall(jniinvokeinterfaceref[].ReleaseDoubleArrayElements, Nothing, (Ptr{JNIEnv}, jdoubleArray, Ptr{jdouble}, jint,), penv, array, elems, mode)

get_boolean_array_region(array::jbooleanArray, start::Integer, l::Integer, buf::Array{jboolean,1}, penv=jnienvptrs[]) =
  ccall(jniinvokeinterfaceref[].GetBooleanArrayRegion, Nothing, (Ptr{JNIEnv}, jbooleanArray, jsize, jsize, Ptr{jboolean},), penv, array, start, l, buf)

get_byte_array_region(array::jbyteArray, start::Integer, len::Integer, buf::Array{jbyte,1}, penv=jnienvptrs[]) =
  ccall(jniinvokeinterfaceref[].GetByteArrayRegion, Nothing, (Ptr{JNIEnv}, jbyteArray, jsize, jsize, Ptr{jbyte},), penv, array, start, len, buf)

get_char_array_region(array::jcharArray, start::Integer, len::Integer, buf::Array{jchar,1}, penv=jnienvptrs[]) =
  ccall(jniinvokeinterfaceref[].GetCharArrayRegion, Nothing, (Ptr{JNIEnv}, jcharArray, jsize, jsize, Ptr{jchar},), penv, array, start, len, buf)

get_short_array_region(array::jshortArray, start::Integer, len::Integer, buf::Array{jshort,1}, penv=jnienvptrs[]) =
  ccall(jniinvokeinterfaceref[].GetShortArrayRegion, Nothing, (Ptr{JNIEnv}, jshortArray, jsize, jsize, Ptr{jshort},), penv, array, start, len, buf)

get_int_array_region(array::jintArray, start::Integer, len::Integer, buf::Array{jint,1}, penv=jnienvptrs[]) =
  ccall(jniinvokeinterfaceref[].GetIntArrayRegion, Nothing, (Ptr{JNIEnv}, jintArray, jsize, jsize, Ptr{jint},), penv, array, start, len, buf)

get_long_array_region(array::jlongArray, start::Integer, len::Integer, buf::Array{jlong,1}, penv=jnienvptrs[]) =
  ccall(jniinvokeinterfaceref[].GetLongArrayRegion, Nothing, (Ptr{JNIEnv}, jlongArray, jsize, jsize, Ptr{jlong},), penv, array, start, len, buf)

get_float_array_region(array::jfloatArray, start::Integer, len::Integer, buf::Array{jfloat,1}, penv=jnienvptrs[]) =
  ccall(jniinvokeinterfaceref[].GetFloatArrayRegion, Nothing, (Ptr{JNIEnv}, jfloatArray, jsize, jsize, Ptr{jfloat},), penv, array, start, len, buf)

get_double_array_region(array::jdoubleArray, start::Integer, len::Integer, buf::Array{jdouble,1}, penv=jnienvptrs[]) =
  ccall(jniinvokeinterfaceref[].GetDoubleArrayRegion, Nothing, (Ptr{JNIEnv}, jdoubleArray, jsize, jsize, Ptr{jdouble},), penv, array, start, len, buf)

set_boolean_array_region(array::jbooleanArray, start::Integer, l::Integer, buf::Array{jboolean,1}, penv=jnienvptrs[]) =
  ccall(jniinvokeinterfaceref[].SetBooleanArrayRegion, Nothing, (Ptr{JNIEnv}, jbooleanArray, jsize, jsize, Ptr{jboolean},), penv, array, start, l, buf)

set_byte_array_region(array::jbyteArray, start::Integer, len::Integer, buf::Array{jbyte,1}, penv=jnienvptrs[]) =
  ccall(jniinvokeinterfaceref[].SetByteArrayRegion, Nothing, (Ptr{JNIEnv}, jbyteArray, jsize, jsize, Ptr{jbyte},), penv, array, start, len, buf)

set_char_array_region(array::jcharArray, start::Integer, len::Integer, buf::Array{jchar,1}, penv=jnienvptrs[]) =
  ccall(jniinvokeinterfaceref[].SetCharArrayRegion, Nothing, (Ptr{JNIEnv}, jcharArray, jsize, jsize, Ptr{jchar},), penv, array, start, len, buf)

set_short_array_region(array::jshortArray, start::Integer, len::Integer, buf::Array{jshort,1}, penv=jnienvptrs[]) =
  ccall(jniinvokeinterfaceref[].SetShortArrayRegion, Nothing, (Ptr{JNIEnv}, jshortArray, jsize, jsize, Ptr{jshort},), penv, array, start, len, buf)

set_int_array_region(array::jintArray, start::Integer, len::Integer, buf::Array{jint,1}, penv=jnienvptrs[]) =
  ccall(jniinvokeinterfaceref[].SetIntArrayRegion, Nothing, (Ptr{JNIEnv}, jintArray, jsize, jsize, Ptr{jint},), penv, array, start, len, buf)

set_long_array_region(array::jlongArray, start::Integer, len::Integer, buf::Array{jlong,1}, penv=jnienvptrs[]) =
  ccall(jniinvokeinterfaceref[].SetLongArrayRegion, Nothing, (Ptr{JNIEnv}, jlongArray, jsize, jsize, Ptr{jlong},), penv, array, start, len, buf)

set_float_array_region(array::jfloatArray, start::Integer, len::Integer, buf::Array{jfloat,1}, penv=jnienvptrs[]) =
  ccall(jniinvokeinterfaceref[].SetFloatArrayRegion, Nothing, (Ptr{JNIEnv}, jfloatArray, jsize, jsize, Ptr{jfloat},), penv, array, start, len, buf)

set_double_array_region(array::jdoubleArray, start::Integer, len::Integer, buf::Array{jdouble,1}, penv=jnienvptrs[]) =
  ccall(jniinvokeinterfaceref[].SetDoubleArrayRegion, Nothing, (Ptr{JNIEnv}, jdoubleArray, jsize, jsize, Ptr{jdouble},), penv, array, start, len, buf)

register_natives(clazz::jclass, methods::Array{JNINativeMethod,1}, nMethods::jint, penv=jnienvptrs[]) =
  ccall(jniinvokeinterfaceref[].RegisterNatives, jint, (Ptr{JNIEnv}, jclass, Ptr{JNINativeMethod}, jint,), penv, clazz, methods, nMethods)

unregister_natives(clazz::jclass, penv=jnienvptrs[]) =
  ccall(jniinvokeinterfaceref[].UnregisterNatives, jint, (Ptr{JNIEnv}, jclass,), penv, clazz)

monitor_enter(obj::jobject_arg, penv=jnienvptrs[]) =
  ccall(jniinvokeinterfaceref[].MonitorEnter, jint, (Ptr{JNIEnv}, jobject,), penv, obj)

monitor_exit(obj::jobject_arg, penv=jnienvptrs[]) =
  ccall(jniinvokeinterfaceref[].MonitorExit, jint, (Ptr{JNIEnv}, jobject,), penv, obj)

get_java_v_m(vm::Array{JavaVM,1}, penv=jnienvptrs[]) =
  ccall(jniinvokeinterfaceref[].GetJavaVM, jint, (Ptr{JNIEnv}, Array{JavaVM,1},), penv, vm)

get_string_region(str::jstring, start::Integer, len::Integer, buf::Array{jchar,1}, penv=jnienvptrs[]) =
  ccall(jniinvokeinterfaceref[].GetStringRegion, Nothing, (Ptr{JNIEnv}, jstring, jsize, jsize, Ptr{jchar},), penv, str, start, len, buf)

get_string_u_t_f_region(str::jstring, start::Integer, len::Integer, buf::AnyString, penv=jnienvptrs[]) =
  ccall(jniinvokeinterfaceref[].GetStringUTFRegion, Nothing, (Ptr{JNIEnv}, jstring, jsize, jsize, Cstring,), penv, str, start, len, buf)

get_primitive_array_critical(array::jarray, isCopy::PtrIsCopy, penv=jnienvptrs[]) =
  ccall(jniinvokeinterfaceref[].GetPrimitiveArrayCritical, Ptr{Nothing}, (Ptr{JNIEnv}, jarray, Ptr{jboolean},), penv, array, isCopy)

release_primitive_array_critical(array::jarray, carray::Ptr{Nothing}, mode::jint, penv=jnienvptrs[]) =
  ccall(jniinvokeinterfaceref[].ReleasePrimitiveArrayCritical, Nothing, (Ptr{JNIEnv}, jarray, Ptr{Nothing}, jint,), penv, array, carray, mode)

get_string_critical(string::jstring, isCopy::PtrIsCopy, penv=jnienvptrs[]) =
  ccall(jniinvokeinterfaceref[].GetStringCritical, Ptr{jchar}, (Ptr{JNIEnv}, jstring, Ptr{jboolean},), penv, string, isCopy)

release_string_critical(string::jstring, cstring::Array{jchar,1}, penv=jnienvptrs[]) =
  ccall(jniinvokeinterfaceref[].ReleaseStringCritical, Nothing, (Ptr{JNIEnv}, jstring, Ptr{jchar},), penv, string, cstring)

new_weak_global_ref(obj::jobject_arg, penv=jnienvptrs[]) =
  ccall(jniinvokeinterfaceref[].NewWeakGlobalRef, jweak, (Ptr{JNIEnv}, jobject,), penv, obj)

delete_weak_global_ref(ref::jweak, penv=jnienvptrs[]) =
  ccall(jniinvokeinterfaceref[].DeleteWeakGlobalRef, Nothing, (Ptr{JNIEnv}, jweak,), penv, ref)

exception_check(penv=jnienvptrs[]) =
  ccall(jniinvokeinterfaceref[].ExceptionCheck, jboolean, (Ptr{JNIEnv},), penv)

new_direct_byte_buffer(address::Ptr{Nothing}, capacity::jlong, penv=jnienvptrs[]) =
  ccall(jniinvokeinterfaceref[].NewDirectByteBuffer, jobject, (Ptr{JNIEnv}, Ptr{Nothing}, jlong,), penv, address, capacity)

get_direct_buffer_address(buf::jobject_arg, penv=jnienvptrs[]) =
  ccall(jniinvokeinterfaceref[].GetDirectBufferAddress, Ptr{Nothing}, (Ptr{JNIEnv}, jobject,), penv, buf)

get_direct_buffer_capacity(buf::jobject_arg, penv=jnienvptrs[]) =
  ccall(jniinvokeinterfaceref[].GetDirectBufferCapacity, jlong, (Ptr{JNIEnv}, jobject,), penv, buf)

get_object_ref_type(obj::jobject_arg, penv=jnienvptrs[]) =
  ccall(jniinvokeinterfaceref[].GetObjectRefType, jobjectRefType, (Ptr{JNIEnv}, jobject,), penv, obj)

# === Above Generated by make_jni2.jl ===

# Private functions

function _resetglobalvars()
    jniinvokeinterfaceref[] = JNIInvokeInterface()
    empty!(jnienvptrs)
    push!(jnienvptrs, Ptr{JNIEnv}(C_NULL))
    jninativeinterfaceref[] = JNINativeInterface()
    jvmptrref[] = Ptr{JavaVM}(C_NULL)
end

function _attachthreads()
    Threads.@threads for i=1:Threads.nthreads()
        _attachthread(Ref(jnienvptrs, Threads.threadid()))
    end
end  

function _attachthread(ppenv_thread = Ref{Ptr{JNIEnv}}(C_NULL))
    res = ccall(jniinvokeinterfaceref[].AttachCurrentThread, Cint, (Ptr{Nothing}, Ptr{Ptr{JNIEnv}}, Ptr{Nothing}), jvmptrref[], ppenv_thread, C_NULL)
    res < 0 && throw(JNIError("Unable to attach thread id: $(Threads.threadid())"))
    return ppenv_thread[]
end

function _detachthreads()
    Threads.@threads for i=1:Threads.nthreads()
        _detachthread()
    end
    nothing
end  

function _detachthread()
    res = ccall(jniinvokeinterfaceref[].DetachCurrentThread, Cint, (Ptr{JavaVM},), jvmptrref[])
    res < 0 && throw(JNIError("Unable to detach thread id: $(Threads.threadid())"))
    nothing
end

end
