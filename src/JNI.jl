module JNI

# jnienv.jl exports
export JNINativeInterface, JNIEnv, JNIInvokeInterface, JavaVM
# jni_md.h exports
export jint, jlong, jbyte
# jni.h exports
export jboolean, jchar, jshort, jfloat, jdouble, jsize, jprimitive
# constant export
export JNI_TRUE, JNI_FALSE
export JNI_VERSION_1_1, JNI_VERSION_1_2, JNI_VERSION_1_4, JNI_VERSION_1_6, JNI_VERSION_1_8
export JNI_OK, JNI_ERR, JNI_EDETACHED, JNI_EVERSION, JNI_ENOMEM, JNI_EEXIST, JNI_EINV
# Legacy exports
export jnifunc

include("jnienv.jl")

global jnifunc

# jni_md.h
const jint = Cint
#ifdef _LP64 /* 64-bit Solaris */
# typedef long jlong;
const jlong = Clonglong
const jbyte = Cchar

# jni.h

const jboolean = Cuchar
const jchar = Cushort
const jshort = Cshort
const jfloat = Cfloat
const jdouble = Cdouble
const jsize = jint
jprimitive = Union{jboolean, jchar, jshort, jfloat, jdouble, jint, jlong}

jobject = Ptr{Nothing}
jclass = Ptr{Nothing}
jthrowable = Ptr{Nothing}
jweak = Ptr{Nothing}
jmethodID = Ptr{Nothing}
jfieldID = Ptr{Nothing}
jstring = Ptr{Nothing}
jarray = Ptr{Nothing}
JNINativeMethod = Ptr{Nothing}
jobjectArray = Ptr{Nothing}
jbooleanArray = Ptr{Nothing}
jbyteArray = Ptr{Nothing}
jshortArray = Ptr{Nothing}
jintArray = Ptr{Nothing}
jlongArray = Ptr{Nothing}
jfloatArray = Ptr{Nothing}
jdoubleArray = Ptr{Nothing}
jcharArray = Ptr{Nothing}
jvalue = Int64

@enum jobjectRefType begin
    JNIInvalidRefType    = 0
    JNILocalRefType      = 1
    JNIGlobalRefType     = 2
    JNIWeakGlobalRefType = 3
end

const JNI_VERSION_1_1 = convert(Cint, 0x00010001)
const JNI_VERSION_1_2 = convert(Cint, 0x00010002)
const JNI_VERSION_1_4 = convert(Cint, 0x00010004)
const JNI_VERSION_1_6 = convert(Cint, 0x00010006)
const JNI_VERSION_1_8 = convert(Cint, 0x00010008)
const JNI_VERSION_9   = convert(Cint, 0x00090000)
const JNI_VERSION_10  = convert(Cint, 0x000a0000)

const JNI_TRUE = convert(Cchar, 1)
const JNI_FALSE = convert(Cchar, 0)

# Return Values
const JNI_OK           = convert(Cint, 0)               #/* success */
const JNI_ERR          = convert(Cint, -1)              #/* unknown error */
const JNI_EDETACHED    = convert(Cint, -2)              #/* thread detached from the VM */
const JNI_EVERSION     = convert(Cint, -3)              #/* JNI version error */
const JNI_ENOMEM       = convert(Cint, -4)              #/* not enough memory */
const JNI_EEXIST       = convert(Cint, -5)              #/* VM already created */
const JNI_EINVAL       = convert(Cint, -6)              #/* invalid arguments */

# There is likely over specification here
PtrIsCopy = Union{Ptr{jboolean},Ref{jboolean},Array{jboolean,}}
AnyString = Union{AbstractString,Cstring,Ptr{UInt8}}

function load_jni(penv::Ptr{JNIEnv})
    jnienv = unsafe_load(penv)
    global jnifunc = unsafe_load(jnienv.JNINativeInterface_) #The JNI Function table
end
is_jni_loaded() = isdefined(JNI, :jnifunc) 

# === Below Generated by make_jni2.jl ===

GetVersion(env::Ptr{JNIEnv}) =
  ccall(jnifunc.GetVersion, jint, (Ptr{JNIEnv},), env)

DefineClass(env::Ptr{JNIEnv}, name::AnyString, loader::jobject, buf::Array{jbyte,1}, len::Integer) =
  ccall(jnifunc.DefineClass, jclass, (Ptr{JNIEnv}, Cstring, jobject, Ptr{jbyte}, jsize,), env, name, loader, buf, len)

FindClass(env::Ptr{JNIEnv}, name::AnyString) =
  ccall(jnifunc.FindClass, jclass, (Ptr{JNIEnv}, Cstring,), env, name)

FromReflectedMethod(env::Ptr{JNIEnv}, method::jobject) =
  ccall(jnifunc.FromReflectedMethod, jmethodID, (Ptr{JNIEnv}, jobject,), env, method)

FromReflectedField(env::Ptr{JNIEnv}, field::jobject) =
  ccall(jnifunc.FromReflectedField, jfieldID, (Ptr{JNIEnv}, jobject,), env, field)

ToReflectedMethod(env::Ptr{JNIEnv}, cls::jclass, methodID::jmethodID, isStatic::jboolean) =
  ccall(jnifunc.ToReflectedMethod, jobject, (Ptr{JNIEnv}, jclass, jmethodID, jboolean,), env, cls, methodID, isStatic)

GetSuperclass(env::Ptr{JNIEnv}, sub::jclass) =
  ccall(jnifunc.GetSuperclass, jclass, (Ptr{JNIEnv}, jclass,), env, sub)

IsAssignableFrom(env::Ptr{JNIEnv}, sub::jclass, sup::jclass) =
  ccall(jnifunc.IsAssignableFrom, jboolean, (Ptr{JNIEnv}, jclass, jclass,), env, sub, sup)

ToReflectedField(env::Ptr{JNIEnv}, cls::jclass, fieldID::jfieldID, isStatic::jboolean) =
  ccall(jnifunc.ToReflectedField, jobject, (Ptr{JNIEnv}, jclass, jfieldID, jboolean,), env, cls, fieldID, isStatic)

Throw(env::Ptr{JNIEnv}, obj::jthrowable) =
  ccall(jnifunc.Throw, jint, (Ptr{JNIEnv}, jthrowable,), env, obj)

ThrowNew(env::Ptr{JNIEnv}, clazz::jclass, msg::AnyString) =
  ccall(jnifunc.ThrowNew, jint, (Ptr{JNIEnv}, jclass, Cstring,), env, clazz, msg)

ExceptionOccurred(env::Ptr{JNIEnv}) =
  ccall(jnifunc.ExceptionOccurred, jthrowable, (Ptr{JNIEnv},), env)

ExceptionDescribe(env::Ptr{JNIEnv}) =
  ccall(jnifunc.ExceptionDescribe, Nothing, (Ptr{JNIEnv},), env)

ExceptionClear(env::Ptr{JNIEnv}) =
  ccall(jnifunc.ExceptionClear, Nothing, (Ptr{JNIEnv},), env)

FatalError(env::Ptr{JNIEnv}, msg::AnyString) =
  ccall(jnifunc.FatalError, Nothing, (Ptr{JNIEnv}, Cstring,), env, msg)

PushLocalFrame(env::Ptr{JNIEnv}, capacity::jint) =
  ccall(jnifunc.PushLocalFrame, jint, (Ptr{JNIEnv}, jint,), env, capacity)

PopLocalFrame(env::Ptr{JNIEnv}, result::jobject) =
  ccall(jnifunc.PopLocalFrame, jobject, (Ptr{JNIEnv}, jobject,), env, result)

NewGlobalRef(env::Ptr{JNIEnv}, lobj::jobject) =
  ccall(jnifunc.NewGlobalRef, jobject, (Ptr{JNIEnv}, jobject,), env, lobj)

DeleteGlobalRef(env::Ptr{JNIEnv}, gref::jobject) =
  ccall(jnifunc.DeleteGlobalRef, Nothing, (Ptr{JNIEnv}, jobject,), env, gref)

DeleteLocalRef(env::Ptr{JNIEnv}, obj::jobject) =
  ccall(jnifunc.DeleteLocalRef, Nothing, (Ptr{JNIEnv}, jobject,), env, obj)

IsSameObject(env::Ptr{JNIEnv}, obj1::jobject, obj2::jobject) =
  ccall(jnifunc.IsSameObject, jboolean, (Ptr{JNIEnv}, jobject, jobject,), env, obj1, obj2)

NewLocalRef(env::Ptr{JNIEnv}, ref::jobject) =
  ccall(jnifunc.NewLocalRef, jobject, (Ptr{JNIEnv}, jobject,), env, ref)

EnsureLocalCapacity(env::Ptr{JNIEnv}, capacity::jint) =
  ccall(jnifunc.EnsureLocalCapacity, jint, (Ptr{JNIEnv}, jint,), env, capacity)

AllocObject(env::Ptr{JNIEnv}, clazz::jclass) =
  ccall(jnifunc.AllocObject, jobject, (Ptr{JNIEnv}, jclass,), env, clazz)

NewObjectA(env::Ptr{JNIEnv}, clazz::jclass, methodID::jmethodID, args::Array{jvalue,1}) =
  ccall(jnifunc.NewObjectA, jobject, (Ptr{JNIEnv}, jclass, jmethodID, Ptr{jvalue},), env, clazz, methodID, args)

GetObjectClass(env::Ptr{JNIEnv}, obj::jobject) =
  ccall(jnifunc.GetObjectClass, jclass, (Ptr{JNIEnv}, jobject,), env, obj)

IsInstanceOf(env::Ptr{JNIEnv}, obj::jobject, clazz::jclass) =
  ccall(jnifunc.IsInstanceOf, jboolean, (Ptr{JNIEnv}, jobject, jclass,), env, obj, clazz)

GetMethodID(env::Ptr{JNIEnv}, clazz::jclass, name::AnyString, sig::AnyString) =
  ccall(jnifunc.GetMethodID, jmethodID, (Ptr{JNIEnv}, jclass, Cstring, Cstring,), env, clazz, name, sig)

CallObjectMethodA(env::Ptr{JNIEnv}, obj::jobject, methodID::jmethodID, args::Array{jvalue,1}) =
  ccall(jnifunc.CallObjectMethodA, jobject, (Ptr{JNIEnv}, jobject, jmethodID, Ptr{jvalue},), env, obj, methodID, args)

CallBooleanMethodA(env::Ptr{JNIEnv}, obj::jobject, methodID::jmethodID, args::Array{jvalue,1}) =
  ccall(jnifunc.CallBooleanMethodA, jboolean, (Ptr{JNIEnv}, jobject, jmethodID, Ptr{jvalue},), env, obj, methodID, args)

CallByteMethodA(env::Ptr{JNIEnv}, obj::jobject, methodID::jmethodID, args::Array{jvalue,1}) =
  ccall(jnifunc.CallByteMethodA, jbyte, (Ptr{JNIEnv}, jobject, jmethodID, Ptr{jvalue},), env, obj, methodID, args)

CallCharMethodA(env::Ptr{JNIEnv}, obj::jobject, methodID::jmethodID, args::Array{jvalue,1}) =
  ccall(jnifunc.CallCharMethodA, jchar, (Ptr{JNIEnv}, jobject, jmethodID, Ptr{jvalue},), env, obj, methodID, args)

CallShortMethodA(env::Ptr{JNIEnv}, obj::jobject, methodID::jmethodID, args::Array{jvalue,1}) =
  ccall(jnifunc.CallShortMethodA, jshort, (Ptr{JNIEnv}, jobject, jmethodID, Ptr{jvalue},), env, obj, methodID, args)

CallIntMethodA(env::Ptr{JNIEnv}, obj::jobject, methodID::jmethodID, args::Array{jvalue,1}) =
  ccall(jnifunc.CallIntMethodA, jint, (Ptr{JNIEnv}, jobject, jmethodID, Ptr{jvalue},), env, obj, methodID, args)

CallLongMethodA(env::Ptr{JNIEnv}, obj::jobject, methodID::jmethodID, args::Array{jvalue,1}) =
  ccall(jnifunc.CallLongMethodA, jlong, (Ptr{JNIEnv}, jobject, jmethodID, Ptr{jvalue},), env, obj, methodID, args)

CallFloatMethodA(env::Ptr{JNIEnv}, obj::jobject, methodID::jmethodID, args::Array{jvalue,1}) =
  ccall(jnifunc.CallFloatMethodA, jfloat, (Ptr{JNIEnv}, jobject, jmethodID, Ptr{jvalue},), env, obj, methodID, args)

CallDoubleMethodA(env::Ptr{JNIEnv}, obj::jobject, methodID::jmethodID, args::Array{jvalue,1}) =
  ccall(jnifunc.CallDoubleMethodA, jdouble, (Ptr{JNIEnv}, jobject, jmethodID, Ptr{jvalue},), env, obj, methodID, args)

CallVoidMethodA(env::Ptr{JNIEnv}, obj::jobject, methodID::jmethodID, args::Array{jvalue,1}) =
  ccall(jnifunc.CallVoidMethodA, Nothing, (Ptr{JNIEnv}, jobject, jmethodID, Ptr{jvalue},), env, obj, methodID, args)

CallNonvirtualObjectMethodA(env::Ptr{JNIEnv}, obj::jobject, clazz::jclass, methodID::jmethodID, args::Array{jvalue,1}) =
  ccall(jnifunc.CallNonvirtualObjectMethodA, jobject, (Ptr{JNIEnv}, jobject, jclass, jmethodID, Ptr{jvalue},), env, obj, clazz, methodID, args)

CallNonvirtualBooleanMethodA(env::Ptr{JNIEnv}, obj::jobject, clazz::jclass, methodID::jmethodID, args::Array{jvalue,1}) =
  ccall(jnifunc.CallNonvirtualBooleanMethodA, jboolean, (Ptr{JNIEnv}, jobject, jclass, jmethodID, Ptr{jvalue},), env, obj, clazz, methodID, args)

CallNonvirtualByteMethodA(env::Ptr{JNIEnv}, obj::jobject, clazz::jclass, methodID::jmethodID, args::Array{jvalue,1}) =
  ccall(jnifunc.CallNonvirtualByteMethodA, jbyte, (Ptr{JNIEnv}, jobject, jclass, jmethodID, Ptr{jvalue},), env, obj, clazz, methodID, args)

CallNonvirtualCharMethodA(env::Ptr{JNIEnv}, obj::jobject, clazz::jclass, methodID::jmethodID, args::Array{jvalue,1}) =
  ccall(jnifunc.CallNonvirtualCharMethodA, jchar, (Ptr{JNIEnv}, jobject, jclass, jmethodID, Ptr{jvalue},), env, obj, clazz, methodID, args)

CallNonvirtualShortMethodA(env::Ptr{JNIEnv}, obj::jobject, clazz::jclass, methodID::jmethodID, args::Array{jvalue,1}) =
  ccall(jnifunc.CallNonvirtualShortMethodA, jshort, (Ptr{JNIEnv}, jobject, jclass, jmethodID, Ptr{jvalue},), env, obj, clazz, methodID, args)

CallNonvirtualIntMethodA(env::Ptr{JNIEnv}, obj::jobject, clazz::jclass, methodID::jmethodID, args::Array{jvalue,1}) =
  ccall(jnifunc.CallNonvirtualIntMethodA, jint, (Ptr{JNIEnv}, jobject, jclass, jmethodID, Ptr{jvalue},), env, obj, clazz, methodID, args)

CallNonvirtualLongMethodA(env::Ptr{JNIEnv}, obj::jobject, clazz::jclass, methodID::jmethodID, args::Array{jvalue,1}) =
  ccall(jnifunc.CallNonvirtualLongMethodA, jlong, (Ptr{JNIEnv}, jobject, jclass, jmethodID, Ptr{jvalue},), env, obj, clazz, methodID, args)

CallNonvirtualFloatMethodA(env::Ptr{JNIEnv}, obj::jobject, clazz::jclass, methodID::jmethodID, args::Array{jvalue,1}) =
  ccall(jnifunc.CallNonvirtualFloatMethodA, jfloat, (Ptr{JNIEnv}, jobject, jclass, jmethodID, Ptr{jvalue},), env, obj, clazz, methodID, args)

CallNonvirtualDoubleMethodA(env::Ptr{JNIEnv}, obj::jobject, clazz::jclass, methodID::jmethodID, args::Array{jvalue,1}) =
  ccall(jnifunc.CallNonvirtualDoubleMethodA, jdouble, (Ptr{JNIEnv}, jobject, jclass, jmethodID, Ptr{jvalue},), env, obj, clazz, methodID, args)

CallNonvirtualVoidMethodA(env::Ptr{JNIEnv}, obj::jobject, clazz::jclass, methodID::jmethodID, args::Array{jvalue,1}) =
  ccall(jnifunc.CallNonvirtualVoidMethodA, Nothing, (Ptr{JNIEnv}, jobject, jclass, jmethodID, Ptr{jvalue},), env, obj, clazz, methodID, args)

GetFieldID(env::Ptr{JNIEnv}, clazz::jclass, name::AnyString, sig::AnyString) =
  ccall(jnifunc.GetFieldID, jfieldID, (Ptr{JNIEnv}, jclass, Cstring, Cstring,), env, clazz, name, sig)

GetObjectField(env::Ptr{JNIEnv}, obj::jobject, fieldID::jfieldID) =
  ccall(jnifunc.GetObjectField, jobject, (Ptr{JNIEnv}, jobject, jfieldID,), env, obj, fieldID)

GetBooleanField(env::Ptr{JNIEnv}, obj::jobject, fieldID::jfieldID) =
  ccall(jnifunc.GetBooleanField, jboolean, (Ptr{JNIEnv}, jobject, jfieldID,), env, obj, fieldID)

GetByteField(env::Ptr{JNIEnv}, obj::jobject, fieldID::jfieldID) =
  ccall(jnifunc.GetByteField, jbyte, (Ptr{JNIEnv}, jobject, jfieldID,), env, obj, fieldID)

GetCharField(env::Ptr{JNIEnv}, obj::jobject, fieldID::jfieldID) =
  ccall(jnifunc.GetCharField, jchar, (Ptr{JNIEnv}, jobject, jfieldID,), env, obj, fieldID)

GetShortField(env::Ptr{JNIEnv}, obj::jobject, fieldID::jfieldID) =
  ccall(jnifunc.GetShortField, jshort, (Ptr{JNIEnv}, jobject, jfieldID,), env, obj, fieldID)

GetIntField(env::Ptr{JNIEnv}, obj::jobject, fieldID::jfieldID) =
  ccall(jnifunc.GetIntField, jint, (Ptr{JNIEnv}, jobject, jfieldID,), env, obj, fieldID)

GetLongField(env::Ptr{JNIEnv}, obj::jobject, fieldID::jfieldID) =
  ccall(jnifunc.GetLongField, jlong, (Ptr{JNIEnv}, jobject, jfieldID,), env, obj, fieldID)

GetFloatField(env::Ptr{JNIEnv}, obj::jobject, fieldID::jfieldID) =
  ccall(jnifunc.GetFloatField, jfloat, (Ptr{JNIEnv}, jobject, jfieldID,), env, obj, fieldID)

GetDoubleField(env::Ptr{JNIEnv}, obj::jobject, fieldID::jfieldID) =
  ccall(jnifunc.GetDoubleField, jdouble, (Ptr{JNIEnv}, jobject, jfieldID,), env, obj, fieldID)

SetObjectField(env::Ptr{JNIEnv}, obj::jobject, fieldID::jfieldID, val::jobject) =
  ccall(jnifunc.SetObjectField, Nothing, (Ptr{JNIEnv}, jobject, jfieldID, jobject,), env, obj, fieldID, val)

SetBooleanField(env::Ptr{JNIEnv}, obj::jobject, fieldID::jfieldID, val::jboolean) =
  ccall(jnifunc.SetBooleanField, Nothing, (Ptr{JNIEnv}, jobject, jfieldID, jboolean,), env, obj, fieldID, val)

SetByteField(env::Ptr{JNIEnv}, obj::jobject, fieldID::jfieldID, val::jbyte) =
  ccall(jnifunc.SetByteField, Nothing, (Ptr{JNIEnv}, jobject, jfieldID, jbyte,), env, obj, fieldID, val)

SetCharField(env::Ptr{JNIEnv}, obj::jobject, fieldID::jfieldID, val::jchar) =
  ccall(jnifunc.SetCharField, Nothing, (Ptr{JNIEnv}, jobject, jfieldID, jchar,), env, obj, fieldID, val)

SetShortField(env::Ptr{JNIEnv}, obj::jobject, fieldID::jfieldID, val::jshort) =
  ccall(jnifunc.SetShortField, Nothing, (Ptr{JNIEnv}, jobject, jfieldID, jshort,), env, obj, fieldID, val)

SetIntField(env::Ptr{JNIEnv}, obj::jobject, fieldID::jfieldID, val::jint) =
  ccall(jnifunc.SetIntField, Nothing, (Ptr{JNIEnv}, jobject, jfieldID, jint,), env, obj, fieldID, val)

SetLongField(env::Ptr{JNIEnv}, obj::jobject, fieldID::jfieldID, val::jlong) =
  ccall(jnifunc.SetLongField, Nothing, (Ptr{JNIEnv}, jobject, jfieldID, jlong,), env, obj, fieldID, val)

SetFloatField(env::Ptr{JNIEnv}, obj::jobject, fieldID::jfieldID, val::jfloat) =
  ccall(jnifunc.SetFloatField, Nothing, (Ptr{JNIEnv}, jobject, jfieldID, jfloat,), env, obj, fieldID, val)

SetDoubleField(env::Ptr{JNIEnv}, obj::jobject, fieldID::jfieldID, val::jdouble) =
  ccall(jnifunc.SetDoubleField, Nothing, (Ptr{JNIEnv}, jobject, jfieldID, jdouble,), env, obj, fieldID, val)

GetStaticMethodID(env::Ptr{JNIEnv}, clazz::jclass, name::AnyString, sig::AnyString) =
  ccall(jnifunc.GetStaticMethodID, jmethodID, (Ptr{JNIEnv}, jclass, Cstring, Cstring,), env, clazz, name, sig)

CallStaticObjectMethodA(env::Ptr{JNIEnv}, clazz::jclass, methodID::jmethodID, args::Array{jvalue,1}) =
  ccall(jnifunc.CallStaticObjectMethodA, jobject, (Ptr{JNIEnv}, jclass, jmethodID, Ptr{jvalue},), env, clazz, methodID, args)

CallStaticBooleanMethodA(env::Ptr{JNIEnv}, clazz::jclass, methodID::jmethodID, args::Array{jvalue,1}) =
  ccall(jnifunc.CallStaticBooleanMethodA, jboolean, (Ptr{JNIEnv}, jclass, jmethodID, Ptr{jvalue},), env, clazz, methodID, args)

CallStaticByteMethodA(env::Ptr{JNIEnv}, clazz::jclass, methodID::jmethodID, args::Array{jvalue,1}) =
  ccall(jnifunc.CallStaticByteMethodA, jbyte, (Ptr{JNIEnv}, jclass, jmethodID, Ptr{jvalue},), env, clazz, methodID, args)

CallStaticCharMethodA(env::Ptr{JNIEnv}, clazz::jclass, methodID::jmethodID, args::Array{jvalue,1}) =
  ccall(jnifunc.CallStaticCharMethodA, jchar, (Ptr{JNIEnv}, jclass, jmethodID, Ptr{jvalue},), env, clazz, methodID, args)

CallStaticShortMethodA(env::Ptr{JNIEnv}, clazz::jclass, methodID::jmethodID, args::Array{jvalue,1}) =
  ccall(jnifunc.CallStaticShortMethodA, jshort, (Ptr{JNIEnv}, jclass, jmethodID, Ptr{jvalue},), env, clazz, methodID, args)

CallStaticIntMethodA(env::Ptr{JNIEnv}, clazz::jclass, methodID::jmethodID, args::Array{jvalue,1}) =
  ccall(jnifunc.CallStaticIntMethodA, jint, (Ptr{JNIEnv}, jclass, jmethodID, Ptr{jvalue},), env, clazz, methodID, args)

CallStaticLongMethodA(env::Ptr{JNIEnv}, clazz::jclass, methodID::jmethodID, args::Array{jvalue,1}) =
  ccall(jnifunc.CallStaticLongMethodA, jlong, (Ptr{JNIEnv}, jclass, jmethodID, Ptr{jvalue},), env, clazz, methodID, args)

CallStaticFloatMethodA(env::Ptr{JNIEnv}, clazz::jclass, methodID::jmethodID, args::Array{jvalue,1}) =
  ccall(jnifunc.CallStaticFloatMethodA, jfloat, (Ptr{JNIEnv}, jclass, jmethodID, Ptr{jvalue},), env, clazz, methodID, args)

CallStaticDoubleMethodA(env::Ptr{JNIEnv}, clazz::jclass, methodID::jmethodID, args::Array{jvalue,1}) =
  ccall(jnifunc.CallStaticDoubleMethodA, jdouble, (Ptr{JNIEnv}, jclass, jmethodID, Ptr{jvalue},), env, clazz, methodID, args)

CallStaticVoidMethodA(env::Ptr{JNIEnv}, cls::jclass, methodID::jmethodID, args::Array{jvalue,1}) =
  ccall(jnifunc.CallStaticVoidMethodA, Nothing, (Ptr{JNIEnv}, jclass, jmethodID, Ptr{jvalue},), env, cls, methodID, args)

GetStaticFieldID(env::Ptr{JNIEnv}, clazz::jclass, name::AnyString, sig::AnyString) =
  ccall(jnifunc.GetStaticFieldID, jfieldID, (Ptr{JNIEnv}, jclass, Cstring, Cstring,), env, clazz, name, sig)

GetStaticObjectField(env::Ptr{JNIEnv}, clazz::jclass, fieldID::jfieldID) =
  ccall(jnifunc.GetStaticObjectField, jobject, (Ptr{JNIEnv}, jclass, jfieldID,), env, clazz, fieldID)

GetStaticBooleanField(env::Ptr{JNIEnv}, clazz::jclass, fieldID::jfieldID) =
  ccall(jnifunc.GetStaticBooleanField, jboolean, (Ptr{JNIEnv}, jclass, jfieldID,), env, clazz, fieldID)

GetStaticByteField(env::Ptr{JNIEnv}, clazz::jclass, fieldID::jfieldID) =
  ccall(jnifunc.GetStaticByteField, jbyte, (Ptr{JNIEnv}, jclass, jfieldID,), env, clazz, fieldID)

GetStaticCharField(env::Ptr{JNIEnv}, clazz::jclass, fieldID::jfieldID) =
  ccall(jnifunc.GetStaticCharField, jchar, (Ptr{JNIEnv}, jclass, jfieldID,), env, clazz, fieldID)

GetStaticShortField(env::Ptr{JNIEnv}, clazz::jclass, fieldID::jfieldID) =
  ccall(jnifunc.GetStaticShortField, jshort, (Ptr{JNIEnv}, jclass, jfieldID,), env, clazz, fieldID)

GetStaticIntField(env::Ptr{JNIEnv}, clazz::jclass, fieldID::jfieldID) =
  ccall(jnifunc.GetStaticIntField, jint, (Ptr{JNIEnv}, jclass, jfieldID,), env, clazz, fieldID)

GetStaticLongField(env::Ptr{JNIEnv}, clazz::jclass, fieldID::jfieldID) =
  ccall(jnifunc.GetStaticLongField, jlong, (Ptr{JNIEnv}, jclass, jfieldID,), env, clazz, fieldID)

GetStaticFloatField(env::Ptr{JNIEnv}, clazz::jclass, fieldID::jfieldID) =
  ccall(jnifunc.GetStaticFloatField, jfloat, (Ptr{JNIEnv}, jclass, jfieldID,), env, clazz, fieldID)

GetStaticDoubleField(env::Ptr{JNIEnv}, clazz::jclass, fieldID::jfieldID) =
  ccall(jnifunc.GetStaticDoubleField, jdouble, (Ptr{JNIEnv}, jclass, jfieldID,), env, clazz, fieldID)

SetStaticObjectField(env::Ptr{JNIEnv}, clazz::jclass, fieldID::jfieldID, value::jobject) =
  ccall(jnifunc.SetStaticObjectField, Nothing, (Ptr{JNIEnv}, jclass, jfieldID, jobject,), env, clazz, fieldID, value)

SetStaticBooleanField(env::Ptr{JNIEnv}, clazz::jclass, fieldID::jfieldID, value::jboolean) =
  ccall(jnifunc.SetStaticBooleanField, Nothing, (Ptr{JNIEnv}, jclass, jfieldID, jboolean,), env, clazz, fieldID, value)

SetStaticByteField(env::Ptr{JNIEnv}, clazz::jclass, fieldID::jfieldID, value::jbyte) =
  ccall(jnifunc.SetStaticByteField, Nothing, (Ptr{JNIEnv}, jclass, jfieldID, jbyte,), env, clazz, fieldID, value)

SetStaticCharField(env::Ptr{JNIEnv}, clazz::jclass, fieldID::jfieldID, value::jchar) =
  ccall(jnifunc.SetStaticCharField, Nothing, (Ptr{JNIEnv}, jclass, jfieldID, jchar,), env, clazz, fieldID, value)

SetStaticShortField(env::Ptr{JNIEnv}, clazz::jclass, fieldID::jfieldID, value::jshort) =
  ccall(jnifunc.SetStaticShortField, Nothing, (Ptr{JNIEnv}, jclass, jfieldID, jshort,), env, clazz, fieldID, value)

SetStaticIntField(env::Ptr{JNIEnv}, clazz::jclass, fieldID::jfieldID, value::jint) =
  ccall(jnifunc.SetStaticIntField, Nothing, (Ptr{JNIEnv}, jclass, jfieldID, jint,), env, clazz, fieldID, value)

SetStaticLongField(env::Ptr{JNIEnv}, clazz::jclass, fieldID::jfieldID, value::jlong) =
  ccall(jnifunc.SetStaticLongField, Nothing, (Ptr{JNIEnv}, jclass, jfieldID, jlong,), env, clazz, fieldID, value)

SetStaticFloatField(env::Ptr{JNIEnv}, clazz::jclass, fieldID::jfieldID, value::jfloat) =
  ccall(jnifunc.SetStaticFloatField, Nothing, (Ptr{JNIEnv}, jclass, jfieldID, jfloat,), env, clazz, fieldID, value)

SetStaticDoubleField(env::Ptr{JNIEnv}, clazz::jclass, fieldID::jfieldID, value::jdouble) =
  ccall(jnifunc.SetStaticDoubleField, Nothing, (Ptr{JNIEnv}, jclass, jfieldID, jdouble,), env, clazz, fieldID, value)

NewString(env::Ptr{JNIEnv}, unicode::Array{jchar,1}, len::Integer) =
  ccall(jnifunc.NewString, jstring, (Ptr{JNIEnv}, Ptr{jchar}, jsize,), env, unicode, len)

GetStringLength(env::Ptr{JNIEnv}, str::jstring) =
  ccall(jnifunc.GetStringLength, jsize, (Ptr{JNIEnv}, jstring,), env, str)

GetStringChars(env::Ptr{JNIEnv}, str::jstring, isCopy::PtrIsCopy) =
  ccall(jnifunc.GetStringChars, Ptr{jchar}, (Ptr{JNIEnv}, jstring, Ptr{jboolean},), env, str, isCopy)

ReleaseStringChars(env::Ptr{JNIEnv}, str::jstring, chars::Array{jchar,1}) =
  ccall(jnifunc.ReleaseStringChars, Nothing, (Ptr{JNIEnv}, jstring, Ptr{jchar},), env, str, chars)

NewStringUTF(env::Ptr{JNIEnv}, utf::AnyString) =
  ccall(jnifunc.NewStringUTF, jstring, (Ptr{JNIEnv}, Cstring,), env, utf)

GetStringUTFLength(env::Ptr{JNIEnv}, str::jstring) =
  ccall(jnifunc.GetStringUTFLength, jsize, (Ptr{JNIEnv}, jstring,), env, str)

GetStringUTFChars(env::Ptr{JNIEnv}, str::jstring, isCopy::PtrIsCopy) =
  ccall(jnifunc.GetStringUTFChars, Cstring, (Ptr{JNIEnv}, jstring, Ptr{jboolean},), env, str, isCopy)

## Prior to this module we used UInt8 instead of Cstring, must match return value of above
#ReleaseStringUTFChars(env::Ptr{JNIEnv}, str::jstring, chars::Ptr{UInt8}) =
#  ccall(jnifunc.ReleaseStringUTFChars, Nothing, (Ptr{JNIEnv}, jstring, Ptr{UInt8},), env, str, chars)
ReleaseStringUTFChars(env::Ptr{JNIEnv}, str::jstring, chars::AnyString) =
  ccall(jnifunc.ReleaseStringUTFChars, Nothing, (Ptr{JNIEnv}, jstring, Cstring,), env, str, chars)

GetArrayLength(env::Ptr{JNIEnv}, array::jarray) =
  ccall(jnifunc.GetArrayLength, jsize, (Ptr{JNIEnv}, jarray,), env, array)

NewObjectArray(env::Ptr{JNIEnv}, len::Integer, clazz::jclass, init::jobject) =
  ccall(jnifunc.NewObjectArray, jobjectArray, (Ptr{JNIEnv}, jsize, jclass, jobject,), env, len, clazz, init)

GetObjectArrayElement(env::Ptr{JNIEnv}, array::jobjectArray, index::Integer) =
  ccall(jnifunc.GetObjectArrayElement, jobject, (Ptr{JNIEnv}, jobjectArray, jsize,), env, array, index)

SetObjectArrayElement(env::Ptr{JNIEnv}, array::jobjectArray, index::Integer, val::jobject) =
  ccall(jnifunc.SetObjectArrayElement, Nothing, (Ptr{JNIEnv}, jobjectArray, jsize, jobject,), env, array, index, val)

NewBooleanArray(env::Ptr{JNIEnv}, len::Integer) =
  ccall(jnifunc.NewBooleanArray, jbooleanArray, (Ptr{JNIEnv}, jsize,), env, len)

NewByteArray(env::Ptr{JNIEnv}, len::Integer) =
  ccall(jnifunc.NewByteArray, jbyteArray, (Ptr{JNIEnv}, jsize,), env, len)

NewCharArray(env::Ptr{JNIEnv}, len::Integer) =
  ccall(jnifunc.NewCharArray, jcharArray, (Ptr{JNIEnv}, jsize,), env, len)

NewShortArray(env::Ptr{JNIEnv}, len::Integer) =
  ccall(jnifunc.NewShortArray, jshortArray, (Ptr{JNIEnv}, jsize,), env, len)

NewIntArray(env::Ptr{JNIEnv}, len::Integer) =
  ccall(jnifunc.NewIntArray, jintArray, (Ptr{JNIEnv}, jsize,), env, len)

NewLongArray(env::Ptr{JNIEnv}, len::Integer) =
  ccall(jnifunc.NewLongArray, jlongArray, (Ptr{JNIEnv}, jsize,), env, len)

NewFloatArray(env::Ptr{JNIEnv}, len::Integer) =
  ccall(jnifunc.NewFloatArray, jfloatArray, (Ptr{JNIEnv}, jsize,), env, len)

NewDoubleArray(env::Ptr{JNIEnv}, len::Integer) =
  ccall(jnifunc.NewDoubleArray, jdoubleArray, (Ptr{JNIEnv}, jsize,), env, len)

GetBooleanArrayElements(env::Ptr{JNIEnv}, array::jbooleanArray, isCopy::PtrIsCopy) =
  ccall(jnifunc.GetBooleanArrayElements, Ptr{jboolean}, (Ptr{JNIEnv}, jbooleanArray, Ptr{jboolean},), env, array, isCopy)

GetByteArrayElements(env::Ptr{JNIEnv}, array::jbyteArray, isCopy::PtrIsCopy) =
  ccall(jnifunc.GetByteArrayElements, Ptr{jbyte}, (Ptr{JNIEnv}, jbyteArray, Ptr{jboolean},), env, array, isCopy)

GetCharArrayElements(env::Ptr{JNIEnv}, array::jcharArray, isCopy::PtrIsCopy) =
  ccall(jnifunc.GetCharArrayElements, Ptr{jchar}, (Ptr{JNIEnv}, jcharArray, Ptr{jboolean},), env, array, isCopy)

GetShortArrayElements(env::Ptr{JNIEnv}, array::jshortArray, isCopy::PtrIsCopy) =
  ccall(jnifunc.GetShortArrayElements, Ptr{jshort}, (Ptr{JNIEnv}, jshortArray, Ptr{jboolean},), env, array, isCopy)

GetIntArrayElements(env::Ptr{JNIEnv}, array::jintArray, isCopy::PtrIsCopy) =
  ccall(jnifunc.GetIntArrayElements, Ptr{jint}, (Ptr{JNIEnv}, jintArray, Ptr{jboolean},), env, array, isCopy)

GetLongArrayElements(env::Ptr{JNIEnv}, array::jlongArray, isCopy::PtrIsCopy) =
  ccall(jnifunc.GetLongArrayElements, Ptr{jlong}, (Ptr{JNIEnv}, jlongArray, Ptr{jboolean},), env, array, isCopy)

GetFloatArrayElements(env::Ptr{JNIEnv}, array::jfloatArray, isCopy::PtrIsCopy) =
  ccall(jnifunc.GetFloatArrayElements, Ptr{jfloat}, (Ptr{JNIEnv}, jfloatArray, Ptr{jboolean},), env, array, isCopy)

GetDoubleArrayElements(env::Ptr{JNIEnv}, array::jdoubleArray, isCopy::PtrIsCopy) =
  ccall(jnifunc.GetDoubleArrayElements, Ptr{jdouble}, (Ptr{JNIEnv}, jdoubleArray, Ptr{jboolean},), env, array, isCopy)

ReleaseBooleanArrayElements(env::Ptr{JNIEnv}, array::jbooleanArray, elems::Ptr{jboolean}, mode::jint) =
  ccall(jnifunc.ReleaseBooleanArrayElements, Nothing, (Ptr{JNIEnv}, jbooleanArray, Ptr{jboolean}, jint,), env, array, elems, mode)

ReleaseByteArrayElements(env::Ptr{JNIEnv}, array::jbyteArray, elems::Ptr{jbyte}, mode::jint) =
  ccall(jnifunc.ReleaseByteArrayElements, Nothing, (Ptr{JNIEnv}, jbyteArray, Ptr{jbyte}, jint,), env, array, elems, mode)

ReleaseCharArrayElements(env::Ptr{JNIEnv}, array::jcharArray, elems::Ptr{jchar}, mode::jint) =
  ccall(jnifunc.ReleaseCharArrayElements, Nothing, (Ptr{JNIEnv}, jcharArray, Ptr{jchar}, jint,), env, array, elems, mode)

ReleaseShortArrayElements(env::Ptr{JNIEnv}, array::jshortArray, elems::Ptr{jshort}, mode::jint) =
  ccall(jnifunc.ReleaseShortArrayElements, Nothing, (Ptr{JNIEnv}, jshortArray, Ptr{jshort}, jint,), env, array, elems, mode)

ReleaseIntArrayElements(env::Ptr{JNIEnv}, array::jintArray, elems::Ptr{jint}, mode::jint) =
  ccall(jnifunc.ReleaseIntArrayElements, Nothing, (Ptr{JNIEnv}, jintArray, Ptr{jint}, jint,), env, array, elems, mode)

ReleaseLongArrayElements(env::Ptr{JNIEnv}, array::jlongArray, elems::Ptr{jlong}, mode::jint) =
  ccall(jnifunc.ReleaseLongArrayElements, Nothing, (Ptr{JNIEnv}, jlongArray, Ptr{jlong}, jint,), env, array, elems, mode)

ReleaseFloatArrayElements(env::Ptr{JNIEnv}, array::jfloatArray, elems::Ptr{jfloat}, mode::jint) =
  ccall(jnifunc.ReleaseFloatArrayElements, Nothing, (Ptr{JNIEnv}, jfloatArray, Ptr{jfloat}, jint,), env, array, elems, mode)

ReleaseDoubleArrayElements(env::Ptr{JNIEnv}, array::jdoubleArray, elems::Ptr{jdouble}, mode::jint) =
  ccall(jnifunc.ReleaseDoubleArrayElements, Nothing, (Ptr{JNIEnv}, jdoubleArray, Ptr{jdouble}, jint,), env, array, elems, mode)

GetBooleanArrayRegion(env::Ptr{JNIEnv}, array::jbooleanArray, start::Integer, l::Integer, buf::Array{jboolean,1}) =
  ccall(jnifunc.GetBooleanArrayRegion, Nothing, (Ptr{JNIEnv}, jbooleanArray, jsize, jsize, Ptr{jboolean},), env, array, start, l, buf)

GetByteArrayRegion(env::Ptr{JNIEnv}, array::jbyteArray, start::Integer, len::Integer, buf::Array{jbyte,1}) =
  ccall(jnifunc.GetByteArrayRegion, Nothing, (Ptr{JNIEnv}, jbyteArray, jsize, jsize, Ptr{jbyte},), env, array, start, len, buf)

GetCharArrayRegion(env::Ptr{JNIEnv}, array::jcharArray, start::Integer, len::Integer, buf::Array{jchar,1}) =
  ccall(jnifunc.GetCharArrayRegion, Nothing, (Ptr{JNIEnv}, jcharArray, jsize, jsize, Ptr{jchar},), env, array, start, len, buf)

GetShortArrayRegion(env::Ptr{JNIEnv}, array::jshortArray, start::Integer, len::Integer, buf::Array{jshort,1}) =
  ccall(jnifunc.GetShortArrayRegion, Nothing, (Ptr{JNIEnv}, jshortArray, jsize, jsize, Ptr{jshort},), env, array, start, len, buf)

GetIntArrayRegion(env::Ptr{JNIEnv}, array::jintArray, start::Integer, len::Integer, buf::Array{jint,1}) =
  ccall(jnifunc.GetIntArrayRegion, Nothing, (Ptr{JNIEnv}, jintArray, jsize, jsize, Ptr{jint},), env, array, start, len, buf)

GetLongArrayRegion(env::Ptr{JNIEnv}, array::jlongArray, start::Integer, len::Integer, buf::Array{jlong,1}) =
  ccall(jnifunc.GetLongArrayRegion, Nothing, (Ptr{JNIEnv}, jlongArray, jsize, jsize, Ptr{jlong},), env, array, start, len, buf)

GetFloatArrayRegion(env::Ptr{JNIEnv}, array::jfloatArray, start::Integer, len::Integer, buf::Array{jfloat,1}) =
  ccall(jnifunc.GetFloatArrayRegion, Nothing, (Ptr{JNIEnv}, jfloatArray, jsize, jsize, Ptr{jfloat},), env, array, start, len, buf)

GetDoubleArrayRegion(env::Ptr{JNIEnv}, array::jdoubleArray, start::Integer, len::Integer, buf::Array{jdouble,1}) =
  ccall(jnifunc.GetDoubleArrayRegion, Nothing, (Ptr{JNIEnv}, jdoubleArray, jsize, jsize, Ptr{jdouble},), env, array, start, len, buf)

SetBooleanArrayRegion(env::Ptr{JNIEnv}, array::jbooleanArray, start::Integer, l::Integer, buf::Array{jboolean,1}) =
  ccall(jnifunc.SetBooleanArrayRegion, Nothing, (Ptr{JNIEnv}, jbooleanArray, jsize, jsize, Ptr{jboolean},), env, array, start, l, buf)

SetByteArrayRegion(env::Ptr{JNIEnv}, array::jbyteArray, start::Integer, len::Integer, buf::Array{jbyte,1}) =
  ccall(jnifunc.SetByteArrayRegion, Nothing, (Ptr{JNIEnv}, jbyteArray, jsize, jsize, Ptr{jbyte},), env, array, start, len, buf)

SetCharArrayRegion(env::Ptr{JNIEnv}, array::jcharArray, start::Integer, len::Integer, buf::Array{jchar,1}) =
  ccall(jnifunc.SetCharArrayRegion, Nothing, (Ptr{JNIEnv}, jcharArray, jsize, jsize, Ptr{jchar},), env, array, start, len, buf)

SetShortArrayRegion(env::Ptr{JNIEnv}, array::jshortArray, start::Integer, len::Integer, buf::Array{jshort,1}) =
  ccall(jnifunc.SetShortArrayRegion, Nothing, (Ptr{JNIEnv}, jshortArray, jsize, jsize, Ptr{jshort},), env, array, start, len, buf)

SetIntArrayRegion(env::Ptr{JNIEnv}, array::jintArray, start::Integer, len::Integer, buf::Array{jint,1}) =
  ccall(jnifunc.SetIntArrayRegion, Nothing, (Ptr{JNIEnv}, jintArray, jsize, jsize, Ptr{jint},), env, array, start, len, buf)

SetLongArrayRegion(env::Ptr{JNIEnv}, array::jlongArray, start::Integer, len::Integer, buf::Array{jlong,1}) =
  ccall(jnifunc.SetLongArrayRegion, Nothing, (Ptr{JNIEnv}, jlongArray, jsize, jsize, Ptr{jlong},), env, array, start, len, buf)

SetFloatArrayRegion(env::Ptr{JNIEnv}, array::jfloatArray, start::Integer, len::Integer, buf::Array{jfloat,1}) =
  ccall(jnifunc.SetFloatArrayRegion, Nothing, (Ptr{JNIEnv}, jfloatArray, jsize, jsize, Ptr{jfloat},), env, array, start, len, buf)

SetDoubleArrayRegion(env::Ptr{JNIEnv}, array::jdoubleArray, start::Integer, len::Integer, buf::Array{jdouble,1}) =
  ccall(jnifunc.SetDoubleArrayRegion, Nothing, (Ptr{JNIEnv}, jdoubleArray, jsize, jsize, Ptr{jdouble},), env, array, start, len, buf)

RegisterNatives(env::Ptr{JNIEnv}, clazz::jclass, methods::Array{JNINativeMethod,1}, nMethods::jint) =
  ccall(jnifunc.RegisterNatives, jint, (Ptr{JNIEnv}, jclass, Ptr{JNINativeMethod}, jint,), env, clazz, methods, nMethods)

UnregisterNatives(env::Ptr{JNIEnv}, clazz::jclass) =
  ccall(jnifunc.UnregisterNatives, jint, (Ptr{JNIEnv}, jclass,), env, clazz)

MonitorEnter(env::Ptr{JNIEnv}, obj::jobject) =
  ccall(jnifunc.MonitorEnter, jint, (Ptr{JNIEnv}, jobject,), env, obj)

MonitorExit(env::Ptr{JNIEnv}, obj::jobject) =
  ccall(jnifunc.MonitorExit, jint, (Ptr{JNIEnv}, jobject,), env, obj)

GetJavaVM(env::Ptr{JNIEnv}, vm::Array{JavaVM,1}) =
  ccall(jnifunc.GetJavaVM, jint, (Ptr{JNIEnv}, Array{JavaVM,1},), env, vm)

GetStringRegion(env::Ptr{JNIEnv}, str::jstring, start::Integer, len::Integer, buf::Array{jchar,1}) =
  ccall(jnifunc.GetStringRegion, Nothing, (Ptr{JNIEnv}, jstring, jsize, jsize, Ptr{jchar},), env, str, start, len, buf)

GetStringUTFRegion(env::Ptr{JNIEnv}, str::jstring, start::Integer, len::Integer, buf::AnyString) =
  ccall(jnifunc.GetStringUTFRegion, Nothing, (Ptr{JNIEnv}, jstring, jsize, jsize, Cstring,), env, str, start, len, buf)

GetPrimitiveArrayCritical(env::Ptr{JNIEnv}, array::jarray, isCopy::PtrIsCopy) =
  ccall(jnifunc.GetPrimitiveArrayCritical, Ptr{Nothing}, (Ptr{JNIEnv}, jarray, Ptr{jboolean},), env, array, isCopy)

ReleasePrimitiveArrayCritical(env::Ptr{JNIEnv}, array::jarray, carray::Ptr{Nothing}, mode::jint) =
  ccall(jnifunc.ReleasePrimitiveArrayCritical, Nothing, (Ptr{JNIEnv}, jarray, Ptr{Nothing}, jint,), env, array, carray, mode)

GetStringCritical(env::Ptr{JNIEnv}, string::jstring, isCopy::PtrIsCopy) =
  ccall(jnifunc.GetStringCritical, Ptr{jchar}, (Ptr{JNIEnv}, jstring, Ptr{jboolean},), env, string, isCopy)

ReleaseStringCritical(env::Ptr{JNIEnv}, string::jstring, cstring::Array{jchar,1}) =
  ccall(jnifunc.ReleaseStringCritical, Nothing, (Ptr{JNIEnv}, jstring, Ptr{jchar},), env, string, cstring)

NewWeakGlobalRef(env::Ptr{JNIEnv}, obj::jobject) =
  ccall(jnifunc.NewWeakGlobalRef, jweak, (Ptr{JNIEnv}, jobject,), env, obj)

DeleteWeakGlobalRef(env::Ptr{JNIEnv}, ref::jweak) =
  ccall(jnifunc.DeleteWeakGlobalRef, Nothing, (Ptr{JNIEnv}, jweak,), env, ref)

ExceptionCheck(env::Ptr{JNIEnv}) =
  ccall(jnifunc.ExceptionCheck, jboolean, (Ptr{JNIEnv},), env)

NewDirectByteBuffer(env::Ptr{JNIEnv}, address::Ptr{Nothing}, capacity::jlong) =
  ccall(jnifunc.NewDirectByteBuffer, jobject, (Ptr{JNIEnv}, Ptr{Nothing}, jlong,), env, address, capacity)

GetDirectBufferAddress(env::Ptr{JNIEnv}, buf::jobject) =
  ccall(jnifunc.GetDirectBufferAddress, Ptr{Nothing}, (Ptr{JNIEnv}, jobject,), env, buf)

GetDirectBufferCapacity(env::Ptr{JNIEnv}, buf::jobject) =
  ccall(jnifunc.GetDirectBufferCapacity, jlong, (Ptr{JNIEnv}, jobject,), env, buf)

GetObjectRefType(env::Ptr{JNIEnv}, obj::jobject) =
  ccall(jnifunc.GetObjectRefType, jobjectRefType, (Ptr{JNIEnv}, jobject,), env, obj)


# === Above Generated by make_jni2.jl ===

end
